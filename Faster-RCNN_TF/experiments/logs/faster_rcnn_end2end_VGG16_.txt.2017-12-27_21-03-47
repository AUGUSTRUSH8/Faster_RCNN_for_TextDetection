+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-27_21-03-47
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-27_21-03-47
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 1000 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=1000, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fb21ee2cfd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
wrote gt roidb to /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 302 -> 302
2017-12-27 21:03:49.989094: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:03:49.989173: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:03:49.989184: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:03:50.267246: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-27 21:03:50.267746: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 6.82GiB
2017-12-27 21:03:50.267775: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-27 21:03:50.267786: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-27 21:03:50.267800: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 1000, total loss: 2.7147, rpn_loss_cls: 0.7574, rpn_loss_box: 1.0469, loss_cls: 0.4985, loss_box: 0.4119, lr: 0.001000
speed: 0.641s / iter
iter: 20 / 1000, total loss: 2.2009, rpn_loss_cls: 0.4948, rpn_loss_box: 0.1902, loss_cls: 0.9130, loss_box: 0.6030, lr: 0.001000
speed: 0.479s / iter
iter: 30 / 1000, total loss: 0.7934, rpn_loss_cls: 0.2728, rpn_loss_box: 0.1534, loss_cls: 0.2152, loss_box: 0.1520, lr: 0.001000
speed: 0.458s / iter
iter: 40 / 1000, total loss: 1.2200, rpn_loss_cls: 0.4157, rpn_loss_box: 0.0469, loss_cls: 0.3990, loss_box: 0.3584, lr: 0.001000
speed: 0.424s / iter
iter: 50 / 1000, total loss: 0.2033, rpn_loss_cls: 0.1239, rpn_loss_box: 0.0544, loss_cls: 0.0249, loss_box: 0.0001, lr: 0.001000
speed: 0.408s / iter
iter: 60 / 1000, total loss: 1.3746, rpn_loss_cls: 0.6371, rpn_loss_box: 0.5413, loss_cls: 0.1443, loss_box: 0.0520, lr: 0.001000
speed: 0.397s / iter
iter: 70 / 1000, total loss: 0.4045, rpn_loss_cls: 0.1279, rpn_loss_box: 0.0306, loss_cls: 0.0968, loss_box: 0.1491, lr: 0.001000
speed: 0.375s / iter
iter: 80 / 1000, total loss: 2.1162, rpn_loss_cls: 0.6112, rpn_loss_box: 1.2635, loss_cls: 0.2175, loss_box: 0.0239, lr: 0.001000
speed: 0.381s / iter
iter: 90 / 1000, total loss: 0.6034, rpn_loss_cls: 0.5053, rpn_loss_box: 0.0535, loss_cls: 0.0440, loss_box: 0.0005, lr: 0.001000
speed: 0.365s / iter
iter: 100 / 1000, total loss: 1.9179, rpn_loss_cls: 0.5729, rpn_loss_box: 0.3847, loss_cls: 0.4537, loss_box: 0.5066, lr: 0.001000
speed: 0.352s / iter
iter: 110 / 1000, total loss: 0.9902, rpn_loss_cls: 0.3262, rpn_loss_box: 0.2836, loss_cls: 0.2347, loss_box: 0.1457, lr: 0.001000
speed: 0.352s / iter
iter: 120 / 1000, total loss: 1.1337, rpn_loss_cls: 0.4417, rpn_loss_box: 0.1199, loss_cls: 0.3581, loss_box: 0.2141, lr: 0.001000
speed: 0.348s / iter
iter: 130 / 1000, total loss: 1.1759, rpn_loss_cls: 0.1979, rpn_loss_box: 0.0391, loss_cls: 0.2730, loss_box: 0.6658, lr: 0.001000
speed: 0.339s / iter
iter: 140 / 1000, total loss: 0.9691, rpn_loss_cls: 0.2368, rpn_loss_box: 0.2469, loss_cls: 0.2161, loss_box: 0.2692, lr: 0.001000
speed: 0.336s / iter
iter: 150 / 1000, total loss: 1.9168, rpn_loss_cls: 0.5862, rpn_loss_box: 1.1082, loss_cls: 0.2116, loss_box: 0.0109, lr: 0.001000
speed: 0.329s / iter
iter: 160 / 1000, total loss: 1.4923, rpn_loss_cls: 0.6170, rpn_loss_box: 0.0388, loss_cls: 0.3434, loss_box: 0.4931, lr: 0.001000
speed: 0.328s / iter
iter: 170 / 1000, total loss: 0.8628, rpn_loss_cls: 0.2744, rpn_loss_box: 0.1606, loss_cls: 0.2258, loss_box: 0.2020, lr: 0.001000
speed: 0.322s / iter
iter: 180 / 1000, total loss: 0.7754, rpn_loss_cls: 0.4817, rpn_loss_box: 0.1058, loss_cls: 0.1500, loss_box: 0.0379, lr: 0.001000
speed: 0.316s / iter
iter: 190 / 1000, total loss: 1.4194, rpn_loss_cls: 0.5205, rpn_loss_box: 0.5115, loss_cls: 0.2809, loss_box: 0.1065, lr: 0.001000
speed: 0.312s / iter
iter: 200 / 1000, total loss: 1.4058, rpn_loss_cls: 0.5764, rpn_loss_box: 0.2658, loss_cls: 0.2223, loss_box: 0.3413, lr: 0.001000
speed: 0.307s / iter
iter: 210 / 1000, total loss: 0.7247, rpn_loss_cls: 0.5167, rpn_loss_box: 0.0772, loss_cls: 0.0762, loss_box: 0.0547, lr: 0.001000
speed: 0.304s / iter
iter: 220 / 1000, total loss: 2.5201, rpn_loss_cls: 1.0307, rpn_loss_box: 1.1941, loss_cls: 0.2934, loss_box: 0.0019, lr: 0.001000
speed: 0.301s / iter
iter: 230 / 1000, total loss: 1.6458, rpn_loss_cls: 0.2202, rpn_loss_box: 1.2287, loss_cls: 0.1449, loss_box: 0.0519, lr: 0.001000
speed: 0.297s / iter
iter: 240 / 1000, total loss: 1.1784, rpn_loss_cls: 0.5681, rpn_loss_box: 0.2182, loss_cls: 0.2363, loss_box: 0.1558, lr: 0.001000
speed: 0.295s / iter
iter: 250 / 1000, total loss: 0.8221, rpn_loss_cls: 0.4645, rpn_loss_box: 0.1188, loss_cls: 0.2361, loss_box: 0.0026, lr: 0.001000
speed: 0.292s / iter
iter: 260 / 1000, total loss: 1.7174, rpn_loss_cls: 0.4617, rpn_loss_box: 0.2301, loss_cls: 0.4829, loss_box: 0.5427, lr: 0.001000
speed: 0.290s / iter
iter: 270 / 1000, total loss: 0.9342, rpn_loss_cls: 0.1354, rpn_loss_box: 0.0174, loss_cls: 0.2559, loss_box: 0.5255, lr: 0.001000
speed: 0.288s / iter
iter: 280 / 1000, total loss: 0.4301, rpn_loss_cls: 0.1552, rpn_loss_box: 0.0038, loss_cls: 0.1694, loss_box: 0.1016, lr: 0.001000
speed: 0.286s / iter
iter: 290 / 1000, total loss: 1.0411, rpn_loss_cls: 0.3426, rpn_loss_box: 0.2841, loss_cls: 0.1917, loss_box: 0.2226, lr: 0.001000
speed: 0.284s / iter
iter: 300 / 1000, total loss: 0.4851, rpn_loss_cls: 0.2171, rpn_loss_box: 0.1124, loss_cls: 0.0809, loss_box: 0.0747, lr: 0.001000
speed: 0.282s / iter
iter: 310 / 1000, total loss: 0.4752, rpn_loss_cls: 0.2585, rpn_loss_box: 0.0310, loss_cls: 0.1154, loss_box: 0.0703, lr: 0.001000
speed: 0.280s / iter
iter: 320 / 1000, total loss: 0.3291, rpn_loss_cls: 0.1627, rpn_loss_box: 0.0442, loss_cls: 0.1208, loss_box: 0.0013, lr: 0.001000
speed: 0.278s / iter
iter: 330 / 1000, total loss: 0.1768, rpn_loss_cls: 0.0516, rpn_loss_box: 0.0384, loss_cls: 0.0546, loss_box: 0.0322, lr: 0.001000
speed: 0.277s / iter
iter: 340 / 1000, total loss: 2.1137, rpn_loss_cls: 0.5251, rpn_loss_box: 0.4219, loss_cls: 0.7005, loss_box: 0.4663, lr: 0.001000
speed: 0.276s / iter
iter: 350 / 1000, total loss: 1.1730, rpn_loss_cls: 0.4544, rpn_loss_box: 0.0932, loss_cls: 0.3076, loss_box: 0.3179, lr: 0.001000
speed: 0.274s / iter
iter: 360 / 1000, total loss: 0.9416, rpn_loss_cls: 0.4005, rpn_loss_box: 0.5011, loss_cls: 0.0390, loss_box: 0.0010, lr: 0.001000
speed: 0.273s / iter
iter: 370 / 1000, total loss: 2.4126, rpn_loss_cls: 1.0311, rpn_loss_box: 0.8802, loss_cls: 0.3782, loss_box: 0.1231, lr: 0.001000
speed: 0.272s / iter
iter: 380 / 1000, total loss: 1.4928, rpn_loss_cls: 0.3896, rpn_loss_box: 0.2780, loss_cls: 0.5255, loss_box: 0.2997, lr: 0.001000
speed: 0.271s / iter
iter: 390 / 1000, total loss: 1.2310, rpn_loss_cls: 0.3613, rpn_loss_box: 0.3541, loss_cls: 0.2737, loss_box: 0.2419, lr: 0.001000
speed: 0.270s / iter
iter: 400 / 1000, total loss: 0.7076, rpn_loss_cls: 0.4626, rpn_loss_box: 0.1288, loss_cls: 0.0915, loss_box: 0.0248, lr: 0.001000
speed: 0.268s / iter
iter: 410 / 1000, total loss: 1.1041, rpn_loss_cls: 0.4654, rpn_loss_box: 0.0831, loss_cls: 0.2425, loss_box: 0.3132, lr: 0.001000
speed: 0.268s / iter
iter: 420 / 1000, total loss: 0.2468, rpn_loss_cls: 0.1340, rpn_loss_box: 0.0346, loss_cls: 0.0489, loss_box: 0.0293, lr: 0.001000
speed: 0.267s / iter
iter: 430 / 1000, total loss: 0.4481, rpn_loss_cls: 0.1279, rpn_loss_box: 0.0213, loss_cls: 0.1546, loss_box: 0.1444, lr: 0.001000
speed: 0.266s / iter
iter: 440 / 1000, total loss: 1.0378, rpn_loss_cls: 0.2559, rpn_loss_box: 0.1066, loss_cls: 0.4194, loss_box: 0.2559, lr: 0.001000
speed: 0.265s / iter
iter: 450 / 1000, total loss: 0.4447, rpn_loss_cls: 0.1615, rpn_loss_box: 0.0191, loss_cls: 0.1396, loss_box: 0.1245, lr: 0.001000
speed: 0.264s / iter
iter: 460 / 1000, total loss: 1.0973, rpn_loss_cls: 0.3084, rpn_loss_box: 0.0197, loss_cls: 0.3376, loss_box: 0.4316, lr: 0.001000
speed: 0.264s / iter
iter: 470 / 1000, total loss: 1.0430, rpn_loss_cls: 0.1686, rpn_loss_box: 0.0706, loss_cls: 0.2673, loss_box: 0.5366, lr: 0.001000
speed: 0.263s / iter
iter: 480 / 1000, total loss: 1.0175, rpn_loss_cls: 0.1604, rpn_loss_box: 0.0775, loss_cls: 0.3284, loss_box: 0.4512, lr: 0.001000
speed: 0.262s / iter
iter: 490 / 1000, total loss: 1.0206, rpn_loss_cls: 0.2156, rpn_loss_box: 0.1371, loss_cls: 0.2782, loss_box: 0.3897, lr: 0.001000
speed: 0.261s / iter
iter: 500 / 1000, total loss: 1.0607, rpn_loss_cls: 0.4107, rpn_loss_box: 0.4239, loss_cls: 0.1467, loss_box: 0.0794, lr: 0.001000
speed: 0.261s / iter
iter: 510 / 1000, total loss: 0.6811, rpn_loss_cls: 0.1960, rpn_loss_box: 0.1026, loss_cls: 0.1626, loss_box: 0.2198, lr: 0.001000
speed: 0.260s / iter
iter: 520 / 1000, total loss: 1.7675, rpn_loss_cls: 0.4573, rpn_loss_box: 0.1832, loss_cls: 0.5733, loss_box: 0.5537, lr: 0.001000
speed: 0.260s / iter
iter: 530 / 1000, total loss: 0.6660, rpn_loss_cls: 0.2006, rpn_loss_box: 0.0298, loss_cls: 0.1506, loss_box: 0.2849, lr: 0.001000
speed: 0.259s / iter
iter: 540 / 1000, total loss: 2.3682, rpn_loss_cls: 0.5504, rpn_loss_box: 0.9527, loss_cls: 0.4728, loss_box: 0.3923, lr: 0.001000
speed: 0.258s / iter
iter: 550 / 1000, total loss: 1.2002, rpn_loss_cls: 0.2457, rpn_loss_box: 0.2166, loss_cls: 0.2920, loss_box: 0.4460, lr: 0.001000
speed: 0.258s / iter
iter: 560 / 1000, total loss: 1.5790, rpn_loss_cls: 0.3807, rpn_loss_box: 0.3073, loss_cls: 0.3955, loss_box: 0.4955, lr: 0.001000
speed: 0.257s / iter
iter: 570 / 1000, total loss: 1.2133, rpn_loss_cls: 0.2417, rpn_loss_box: 0.2924, loss_cls: 0.2441, loss_box: 0.4350, lr: 0.001000
speed: 0.257s / iter
iter: 580 / 1000, total loss: 1.1154, rpn_loss_cls: 0.2452, rpn_loss_box: 0.0942, loss_cls: 0.3000, loss_box: 0.4759, lr: 0.001000
speed: 0.256s / iter
iter: 590 / 1000, total loss: 0.6876, rpn_loss_cls: 0.1883, rpn_loss_box: 0.1641, loss_cls: 0.1071, loss_box: 0.2281, lr: 0.001000
speed: 0.256s / iter
iter: 600 / 1000, total loss: 1.0171, rpn_loss_cls: 0.2641, rpn_loss_box: 0.3032, loss_cls: 0.1911, loss_box: 0.2588, lr: 0.001000
speed: 0.255s / iter
/home/alex/Faster-RCNN_TF/tools/../lib/fast_rcnn/bbox_transform.py:23: RuntimeWarning: invalid value encountered in log
  targets_dw = np.log(gt_widths / ex_widths)
iter: 610 / 1000, total loss: 1.6234, rpn_loss_cls: 0.4005, rpn_loss_box: 0.4001, loss_cls: 0.3542, loss_box: 0.4686, lr: 0.001000
speed: 0.255s / iter
iter: 620 / 1000, total loss: 1.1213, rpn_loss_cls: 0.3961, rpn_loss_box: 0.0165, loss_cls: 0.2547, loss_box: 0.4539, lr: 0.001000
speed: 0.254s / iter
iter: 630 / 1000, total loss: 0.5411, rpn_loss_cls: 0.2275, rpn_loss_box: 0.0998, loss_cls: 0.1290, loss_box: 0.0847, lr: 0.001000
speed: 0.254s / iter
iter: 640 / 1000, total loss: 0.5440, rpn_loss_cls: 0.1224, rpn_loss_box: 0.0467, loss_cls: 0.1270, loss_box: 0.2477, lr: 0.001000
speed: 0.254s / iter
iter: 650 / 1000, total loss: 0.9445, rpn_loss_cls: 0.1936, rpn_loss_box: 0.0526, loss_cls: 0.3122, loss_box: 0.3862, lr: 0.001000
speed: 0.253s / iter
iter: 660 / 1000, total loss: 0.7111, rpn_loss_cls: 0.1407, rpn_loss_box: 0.0240, loss_cls: 0.2583, loss_box: 0.2880, lr: 0.001000
speed: 0.253s / iter
iter: 670 / 1000, total loss: 0.7643, rpn_loss_cls: 0.1612, rpn_loss_box: 0.1463, loss_cls: 0.1799, loss_box: 0.2769, lr: 0.001000
speed: 0.252s / iter
iter: 680 / 1000, total loss: 1.0319, rpn_loss_cls: 0.2354, rpn_loss_box: 0.2063, loss_cls: 0.2873, loss_box: 0.3029, lr: 0.001000
speed: 0.252s / iter
iter: 690 / 1000, total loss: 0.6913, rpn_loss_cls: 0.2793, rpn_loss_box: 0.1951, loss_cls: 0.1086, loss_box: 0.1082, lr: 0.001000
speed: 0.252s / iter
iter: 700 / 1000, total loss: 1.9344, rpn_loss_cls: 0.5991, rpn_loss_box: 0.7966, loss_cls: 0.3289, loss_box: 0.2097, lr: 0.001000
speed: 0.252s / iter
iter: 710 / 1000, total loss: 0.2618, rpn_loss_cls: 0.1449, rpn_loss_box: 0.0957, loss_cls: 0.0206, loss_box: 0.0006, lr: 0.001000
speed: 0.252s / iter
iter: 720 / 1000, total loss: 0.6368, rpn_loss_cls: 0.2345, rpn_loss_box: 0.0133, loss_cls: 0.1840, loss_box: 0.2049, lr: 0.001000
speed: 0.251s / iter
iter: 730 / 1000, total loss: 1.3921, rpn_loss_cls: 0.1374, rpn_loss_box: 0.9826, loss_cls: 0.1664, loss_box: 0.1057, lr: 0.001000
speed: 0.251s / iter
iter: 740 / 1000, total loss: 0.7982, rpn_loss_cls: 0.2316, rpn_loss_box: 0.1166, loss_cls: 0.2016, loss_box: 0.2484, lr: 0.001000
speed: 0.250s / iter
iter: 750 / 1000, total loss: 1.5982, rpn_loss_cls: 0.4368, rpn_loss_box: 0.2237, loss_cls: 0.5243, loss_box: 0.4135, lr: 0.001000
speed: 0.250s / iter
iter: 760 / 1000, total loss: 1.0372, rpn_loss_cls: 0.2179, rpn_loss_box: 0.1374, loss_cls: 0.2774, loss_box: 0.4044, lr: 0.001000
speed: 0.250s / iter
iter: 770 / 1000, total loss: 0.3722, rpn_loss_cls: 0.0807, rpn_loss_box: 0.1498, loss_cls: 0.0764, loss_box: 0.0654, lr: 0.001000
speed: 0.250s / iter
iter: 780 / 1000, total loss: 0.4428, rpn_loss_cls: 0.1075, rpn_loss_box: 0.0187, loss_cls: 0.0982, loss_box: 0.2185, lr: 0.001000
speed: 0.249s / iter
iter: 790 / 1000, total loss: 1.1448, rpn_loss_cls: 0.2579, rpn_loss_box: 0.1085, loss_cls: 0.3176, loss_box: 0.4608, lr: 0.001000
speed: 0.249s / iter
iter: 800 / 1000, total loss: 0.6381, rpn_loss_cls: 0.1131, rpn_loss_box: 0.1731, loss_cls: 0.1896, loss_box: 0.1625, lr: 0.001000
speed: 0.249s / iter
iter: 810 / 1000, total loss: 1.0216, rpn_loss_cls: 0.1146, rpn_loss_box: 0.1947, loss_cls: 0.3246, loss_box: 0.3876, lr: 0.001000
speed: 0.249s / iter
iter: 820 / 1000, total loss: 0.4320, rpn_loss_cls: 0.0984, rpn_loss_box: 0.0478, loss_cls: 0.1969, loss_box: 0.0890, lr: 0.001000
speed: 0.248s / iter
iter: 830 / 1000, total loss: 0.9756, rpn_loss_cls: 0.2587, rpn_loss_box: 0.0845, loss_cls: 0.2771, loss_box: 0.3553, lr: 0.001000
speed: 0.248s / iter
iter: 840 / 1000, total loss: 0.7491, rpn_loss_cls: 0.2301, rpn_loss_box: 0.1090, loss_cls: 0.1068, loss_box: 0.3032, lr: 0.001000
speed: 0.248s / iter
iter: 850 / 1000, total loss: 1.3156, rpn_loss_cls: 0.3032, rpn_loss_box: 0.3442, loss_cls: 0.2757, loss_box: 0.3924, lr: 0.001000
speed: 0.248s / iter
iter: 860 / 1000, total loss: 1.0201, rpn_loss_cls: 0.2301, rpn_loss_box: 0.0796, loss_cls: 0.1901, loss_box: 0.5203, lr: 0.001000
speed: 0.247s / iter
iter: 870 / 1000, total loss: 0.9490, rpn_loss_cls: 0.1694, rpn_loss_box: 0.0450, loss_cls: 0.2406, loss_box: 0.4939, lr: 0.001000
speed: 0.247s / iter
iter: 880 / 1000, total loss: 1.0696, rpn_loss_cls: 0.2014, rpn_loss_box: 0.1261, loss_cls: 0.2819, loss_box: 0.4602, lr: 0.001000
speed: 0.247s / iter
iter: 890 / 1000, total loss: 1.3238, rpn_loss_cls: 0.2698, rpn_loss_box: 0.1347, loss_cls: 0.4114, loss_box: 0.5080, lr: 0.001000
speed: 0.247s / iter
iter: 900 / 1000, total loss: 1.1414, rpn_loss_cls: 0.2122, rpn_loss_box: 0.1460, loss_cls: 0.3526, loss_box: 0.4306, lr: 0.001000
speed: 0.246s / iter
iter: 910 / 1000, total loss: 1.5541, rpn_loss_cls: 0.4966, rpn_loss_box: 0.3871, loss_cls: 0.2281, loss_box: 0.4423, lr: 0.001000
speed: 0.246s / iter
iter: 920 / 1000, total loss: 0.7716, rpn_loss_cls: 0.1360, rpn_loss_box: 0.1359, loss_cls: 0.1604, loss_box: 0.3393, lr: 0.001000
speed: 0.246s / iter
iter: 930 / 1000, total loss: 1.0323, rpn_loss_cls: 0.2529, rpn_loss_box: 0.1115, loss_cls: 0.1852, loss_box: 0.4827, lr: 0.001000
speed: 0.246s / iter
iter: 940 / 1000, total loss: 1.1913, rpn_loss_cls: 0.1574, rpn_loss_box: 0.5491, loss_cls: 0.2384, loss_box: 0.2464, lr: 0.001000
speed: 0.246s / iter
iter: 950 / 1000, total loss: 0.1523, rpn_loss_cls: 0.0748, rpn_loss_box: 0.0237, loss_cls: 0.0522, loss_box: 0.0017, lr: 0.001000
speed: 0.246s / iter
iter: 960 / 1000, total loss: 0.3970, rpn_loss_cls: 0.1284, rpn_loss_box: 0.0202, loss_cls: 0.2151, loss_box: 0.0333, lr: 0.001000
speed: 0.245s / iter
iter: 970 / 1000, total loss: 1.4151, rpn_loss_cls: 0.1662, rpn_loss_box: 0.2621, loss_cls: 0.4623, loss_box: 0.5245, lr: 0.001000
speed: 0.245s / iter
iter: 980 / 1000, total loss: 0.5954, rpn_loss_cls: 0.0905, rpn_loss_box: 0.2105, loss_cls: 0.1661, loss_box: 0.1285, lr: 0.001000
speed: 0.245s / iter
iter: 990 / 1000, total loss: 1.1695, rpn_loss_cls: 0.3307, rpn_loss_box: 0.2576, loss_cls: 0.1952, loss_box: 0.3859, lr: 0.001000
speed: 0.245s / iter
iter: 1000 / 1000, total loss: 0.4231, rpn_loss_cls: 0.0502, rpn_loss_box: 0.1568, loss_cls: 0.1119, loss_box: 0.1041, lr: 0.001000
speed: 0.245s / iter
Wrote snapshot to: /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
done solving

real	7m8.581s
user	6m12.152s
sys	0m52.484s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f31dc9705d0>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-12-27 21:10:57.221631: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:10:57.221687: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:10:57.221697: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-27 21:10:57.511091: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-27 21:10:57.511638: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 6.82GiB
2017-12-27 21:10:57.511671: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-27 21:10:57.511684: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-27 21:10:57.511699: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Loading model weights from /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
im_detect: 1/78 2.150s 0.000s
im_detect: 2/78 1.136s 0.000s
im_detect: 3/78 0.793s 0.000s
im_detect: 4/78 0.769s 0.000s
im_detect: 5/78 0.645s 0.000s
im_detect: 6/78 0.558s 0.000s
im_detect: 7/78 0.637s 0.000s
im_detect: 8/78 0.572s 0.000s
im_detect: 9/78 0.521s 0.000s
im_detect: 10/78 0.480s 0.000s
im_detect: 11/78 0.499s 0.000s
im_detect: 12/78 0.468s 0.000s
im_detect: 13/78 0.446s 0.000s
im_detect: 14/78 0.426s 0.000s
im_detect: 15/78 0.430s 0.000s
im_detect: 16/78 0.434s 0.000s
im_detect: 17/78 0.416s 0.000s
im_detect: 18/78 0.399s 0.000s
im_detect: 19/78 0.388s 0.000s
im_detect: 20/78 0.393s 0.000s
im_detect: 21/78 0.380s 0.000s
im_detect: 22/78 0.396s 0.000s
im_detect: 23/78 0.383s 0.000s
im_detect: 24/78 0.372s 0.000s
im_detect: 25/78 0.375s 0.000s
im_detect: 26/78 0.365s 0.000s
im_detect: 27/78 0.356s 0.000s
im_detect: 28/78 0.348s 0.000s
im_detect: 29/78 0.340s 0.000s
im_detect: 30/78 0.332s 0.000s
im_detect: 31/78 0.325s 0.000s
im_detect: 32/78 0.318s 0.000s
im_detect: 33/78 0.329s 0.000s
im_detect: 34/78 0.323s 0.000s
im_detect: 35/78 0.317s 0.000s
im_detect: 36/78 0.311s 0.000s
im_detect: 37/78 0.306s 0.000s
im_detect: 38/78 0.311s 0.000s
im_detect: 39/78 0.306s 0.000s
im_detect: 40/78 0.303s 0.000s
im_detect: 41/78 0.299s 0.000s
im_detect: 42/78 0.294s 0.000s
im_detect: 43/78 0.298s 0.000s
im_detect: 44/78 0.302s 0.000s
im_detect: 45/78 0.307s 0.000s
im_detect: 46/78 0.302s 0.000s
im_detect: 47/78 0.298s 0.000s
im_detect: 48/78 0.295s 0.000s
im_detect: 49/78 0.292s 0.000s
im_detect: 50/78 0.289s 0.000s
im_detect: 51/78 0.285s 0.000s
im_detect: 52/78 0.282s 0.000s
im_detect: 53/78 0.279s 0.000s
im_detect: 54/78 0.282s 0.000s
im_detect: 55/78 0.278s 0.000s
im_detect: 56/78 0.276s 0.000s
im_detect: 57/78 0.273s 0.000s
im_detect: 58/78 0.270s 0.000s
im_detect: 59/78 0.268s 0.000s
im_detect: 60/78 0.271s 0.000s
im_detect: 61/78 0.269s 0.000s
im_detect: 62/78 0.276s 0.000s
im_detect: 63/78 0.273s 0.000s
im_detect: 64/78 0.276s 0.000s
im_detect: 65/78 0.274s 0.000s
im_detect: 66/78 0.272s 0.000s
im_detect: 67/78 0.270s 0.000s
im_detect: 68/78 0.269s 0.000s
im_detect: 69/78 0.268s 0.000s
im_detect: 70/78 0.266s 0.000s
im_detect: 71/78 0.264s 0.000s
im_detect: 72/78 0.262s 0.000s
im_detect: 73/78 0.265s 0.000s
im_detect: 74/78 0.263s 0.000s
im_detect: 75/78 0.261s 0.000s
im_detect: 76/78 0.259s 0.000s
im_detect: 77/78 0.257s 0.000s
im_detect: 78/78 0.260s 0.000s
Evaluating detections
Writing text VOC results file
VOC07 metric? Yes
Reading annotation for 1/78
Saving cached annotations to /home/alex/Faster-RCNN_TF/data/VOCdevkit2007/annotations_cache/annots.pkl
AP for text = 0.2350
Mean AP = 0.2350
~~~~~~~~
Results:
0.235
0.235
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------

real	0m29.294s
user	0m23.104s
sys	0m8.012s
