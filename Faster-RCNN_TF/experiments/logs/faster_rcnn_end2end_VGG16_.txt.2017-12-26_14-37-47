+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-37-47
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-37-47
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 1000 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=1000, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f5fc10d6fd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
voc_2007_trainval gt roidb loaded from /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 458 -> 458
2017-12-26 14:37:51.468025: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:37:51.468085: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:37:51.468101: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:37:51.823809: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 14:37:51.824517: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.16GiB
2017-12-26 14:37:51.824584: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 14:37:51.824627: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 14:37:51.824675: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 1000, total loss: 0.9469, rpn_loss_cls: 0.5662, rpn_loss_box: 0.0928, loss_cls: 0.1794, loss_box: 0.1084, lr: 0.001000
speed: 0.667s / iter
iter: 20 / 1000, total loss: 1.4155, rpn_loss_cls: 0.6236, rpn_loss_box: 0.5918, loss_cls: 0.1700, loss_box: 0.0301, lr: 0.001000
speed: 0.555s / iter
iter: 30 / 1000, total loss: 1.1622, rpn_loss_cls: 0.4953, rpn_loss_box: 0.2122, loss_cls: 0.2087, loss_box: 0.2460, lr: 0.001000
speed: 0.447s / iter
iter: 40 / 1000, total loss: 1.1677, rpn_loss_cls: 0.4815, rpn_loss_box: 0.1221, loss_cls: 0.2917, loss_box: 0.2724, lr: 0.001000
speed: 0.394s / iter
iter: 50 / 1000, total loss: 0.6886, rpn_loss_cls: 0.2383, rpn_loss_box: 0.1064, loss_cls: 0.2129, loss_box: 0.1310, lr: 0.001000
speed: 0.378s / iter
iter: 60 / 1000, total loss: 1.3881, rpn_loss_cls: 0.4717, rpn_loss_box: 0.0162, loss_cls: 0.4457, loss_box: 0.4545, lr: 0.001000
speed: 0.369s / iter
iter: 70 / 1000, total loss: 0.6488, rpn_loss_cls: 0.5133, rpn_loss_box: 0.0909, loss_cls: 0.0418, loss_box: 0.0028, lr: 0.001000
speed: 0.359s / iter
iter: 80 / 1000, total loss: 1.9715, rpn_loss_cls: 0.5986, rpn_loss_box: 0.2173, loss_cls: 0.5132, loss_box: 0.6425, lr: 0.001000
speed: 0.352s / iter
iter: 90 / 1000, total loss: 1.9470, rpn_loss_cls: 0.4169, rpn_loss_box: 0.2349, loss_cls: 0.7653, loss_box: 0.5300, lr: 0.001000
speed: 0.344s / iter
iter: 100 / 1000, total loss: 1.1290, rpn_loss_cls: 0.2911, rpn_loss_box: 0.1677, loss_cls: 0.2922, loss_box: 0.3780, lr: 0.001000
speed: 0.338s / iter
iter: 110 / 1000, total loss: 0.7785, rpn_loss_cls: 0.4468, rpn_loss_box: 0.2624, loss_cls: 0.0688, loss_box: 0.0004, lr: 0.001000
speed: 0.328s / iter
iter: 120 / 1000, total loss: 2.3438, rpn_loss_cls: 0.5291, rpn_loss_box: 0.9889, loss_cls: 0.5316, loss_box: 0.2942, lr: 0.001000
speed: 0.320s / iter
iter: 130 / 1000, total loss: 1.0359, rpn_loss_cls: 0.3424, rpn_loss_box: 0.1826, loss_cls: 0.3156, loss_box: 0.1953, lr: 0.001000
speed: 0.319s / iter
iter: 140 / 1000, total loss: 0.4260, rpn_loss_cls: 0.1467, rpn_loss_box: 0.0532, loss_cls: 0.2253, loss_box: 0.0007, lr: 0.001000
speed: 0.318s / iter
iter: 150 / 1000, total loss: 0.6500, rpn_loss_cls: 0.1489, rpn_loss_box: 0.1731, loss_cls: 0.1924, loss_box: 0.1355, lr: 0.001000
speed: 0.318s / iter
/home/alex/Faster-RCNN_TF/tools/../lib/fast_rcnn/bbox_transform.py:24: RuntimeWarning: invalid value encountered in log
  targets_dh = np.log(gt_heights / ex_heights)
/home/alex/Faster-RCNN_TF/tools/../lib/rpn_msr/proposal_layer_tf.py:150: RuntimeWarning: invalid value encountered in greater_equal
  keep = np.where((ws >= min_size) & (hs >= min_size))[0]
iter: 160 / 1000, total loss: nan, rpn_loss_cls: 0.6836, rpn_loss_box: nan, loss_cls: 0.1886, loss_box: 0.0008, lr: 0.001000
speed: 0.316s / iter
iter: 170 / 1000, total loss: nan, rpn_loss_cls: 0.6846, rpn_loss_box: nan, loss_cls: 0.2355, loss_box: 0.0027, lr: 0.001000
speed: 0.309s / iter
iter: 180 / 1000, total loss: nan, rpn_loss_cls: 0.6914, rpn_loss_box: nan, loss_cls: 0.3593, loss_box: 0.0059, lr: 0.001000
speed: 0.304s / iter
iter: 190 / 1000, total loss: nan, rpn_loss_cls: 0.6664, rpn_loss_box: nan, loss_cls: 0.1143, loss_box: 0.0004, lr: 0.001000
speed: 0.298s / iter
iter: 200 / 1000, total loss: nan, rpn_loss_cls: 0.6691, rpn_loss_box: nan, loss_cls: 0.1939, loss_box: 0.0005, lr: 0.001000
speed: 0.297s / iter
iter: 210 / 1000, total loss: nan, rpn_loss_cls: 0.6669, rpn_loss_box: nan, loss_cls: 0.1570, loss_box: 0.0005, lr: 0.001000
speed: 0.292s / iter
iter: 220 / 1000, total loss: nan, rpn_loss_cls: 0.6598, rpn_loss_box: nan, loss_cls: 0.1727, loss_box: 0.0004, lr: 0.001000
speed: 0.288s / iter
iter: 230 / 1000, total loss: nan, rpn_loss_cls: 0.6769, rpn_loss_box: nan, loss_cls: 0.2970, loss_box: 0.0822, lr: 0.001000
speed: 0.284s / iter
iter: 240 / 1000, total loss: nan, rpn_loss_cls: 0.6528, rpn_loss_box: nan, loss_cls: 0.1517, loss_box: 0.0033, lr: 0.001000
speed: 0.284s / iter
iter: 250 / 1000, total loss: nan, rpn_loss_cls: 0.6631, rpn_loss_box: nan, loss_cls: 0.1637, loss_box: 0.0097, lr: 0.001000
speed: 0.280s / iter
iter: 260 / 1000, total loss: nan, rpn_loss_cls: 0.6384, rpn_loss_box: nan, loss_cls: 0.1445, loss_box: 0.0013, lr: 0.001000
speed: 0.278s / iter
iter: 270 / 1000, total loss: nan, rpn_loss_cls: 0.6663, rpn_loss_box: nan, loss_cls: 0.4064, loss_box: 0.0257, lr: 0.001000
speed: 0.275s / iter
iter: 280 / 1000, total loss: nan, rpn_loss_cls: 0.7043, rpn_loss_box: nan, loss_cls: 0.3506, loss_box: 0.0489, lr: 0.001000
speed: 0.274s / iter
iter: 290 / 1000, total loss: nan, rpn_loss_cls: 0.6581, rpn_loss_box: nan, loss_cls: 0.1041, loss_box: 0.0004, lr: 0.001000
speed: 0.272s / iter
iter: 300 / 1000, total loss: nan, rpn_loss_cls: 0.6720, rpn_loss_box: nan, loss_cls: 0.2056, loss_box: 0.0005, lr: 0.001000
speed: 0.271s / iter
iter: 310 / 1000, total loss: nan, rpn_loss_cls: 0.7121, rpn_loss_box: nan, loss_cls: 0.3523, loss_box: 0.0137, lr: 0.001000
speed: 0.269s / iter
/home/alex/Faster-RCNN_TF/tools/../lib/fast_rcnn/bbox_transform.py:23: RuntimeWarning: invalid value encountered in log
  targets_dw = np.log(gt_widths / ex_widths)
iter: 320 / 1000, total loss: nan, rpn_loss_cls: 0.6315, rpn_loss_box: nan, loss_cls: 0.0942, loss_box: 0.0009, lr: 0.001000
speed: 0.271s / iter
iter: 330 / 1000, total loss: nan, rpn_loss_cls: 0.6306, rpn_loss_box: nan, loss_cls: 0.0989, loss_box: 0.0018, lr: 0.001000
speed: 0.269s / iter
iter: 340 / 1000, total loss: nan, rpn_loss_cls: 0.6050, rpn_loss_box: nan, loss_cls: 0.4748, loss_box: 0.3841, lr: 0.001000
speed: 0.267s / iter
iter: 350 / 1000, total loss: nan, rpn_loss_cls: 0.6824, rpn_loss_box: nan, loss_cls: 0.2813, loss_box: 0.0046, lr: 0.001000
speed: 0.265s / iter
iter: 360 / 1000, total loss: nan, rpn_loss_cls: 0.6274, rpn_loss_box: nan, loss_cls: 0.6992, loss_box: 0.3084, lr: 0.001000
speed: 0.263s / iter
iter: 370 / 1000, total loss: nan, rpn_loss_cls: 0.6287, rpn_loss_box: nan, loss_cls: 0.1055, loss_box: 0.0005, lr: 0.001000
speed: 0.262s / iter
iter: 380 / 1000, total loss: nan, rpn_loss_cls: 0.6304, rpn_loss_box: nan, loss_cls: 0.2970, loss_box: 0.0006, lr: 0.001000
speed: 0.262s / iter
iter: 390 / 1000, total loss: nan, rpn_loss_cls: 0.5908, rpn_loss_box: nan, loss_cls: 0.0669, loss_box: 0.0038, lr: 0.001000
speed: 0.260s / iter
iter: 400 / 1000, total loss: nan, rpn_loss_cls: 0.6168, rpn_loss_box: nan, loss_cls: 0.1252, loss_box: 0.0017, lr: 0.001000
speed: 0.259s / iter
iter: 410 / 1000, total loss: nan, rpn_loss_cls: 0.5901, rpn_loss_box: nan, loss_cls: 0.0846, loss_box: 0.0003, lr: 0.001000
speed: 0.258s / iter
iter: 420 / 1000, total loss: nan, rpn_loss_cls: 0.6341, rpn_loss_box: nan, loss_cls: 0.2708, loss_box: 0.0024, lr: 0.001000
speed: 0.257s / iter
iter: 430 / 1000, total loss: nan, rpn_loss_cls: 0.5776, rpn_loss_box: nan, loss_cls: 0.0639, loss_box: 0.0005, lr: 0.001000
speed: 0.255s / iter
iter: 440 / 1000, total loss: nan, rpn_loss_cls: 0.5857, rpn_loss_box: nan, loss_cls: 0.1111, loss_box: 0.0002, lr: 0.001000
speed: 0.254s / iter
iter: 450 / 1000, total loss: nan, rpn_loss_cls: 0.6551, rpn_loss_box: nan, loss_cls: 0.2121, loss_box: 0.0018, lr: 0.001000
speed: 0.253s / iter
iter: 460 / 1000, total loss: nan, rpn_loss_cls: 0.7229, rpn_loss_box: nan, loss_cls: 0.4256, loss_box: 0.0092, lr: 0.001000
speed: 0.252s / iter
iter: 470 / 1000, total loss: nan, rpn_loss_cls: 0.6103, rpn_loss_box: nan, loss_cls: 0.1807, loss_box: 0.0017, lr: 0.001000
speed: 0.251s / iter
iter: 480 / 1000, total loss: nan, rpn_loss_cls: 0.6019, rpn_loss_box: nan, loss_cls: 0.1766, loss_box: 0.0004, lr: 0.001000
speed: 0.250s / iter
iter: 490 / 1000, total loss: nan, rpn_loss_cls: 0.5873, rpn_loss_box: nan, loss_cls: 0.0827, loss_box: 0.0002, lr: 0.001000
speed: 0.250s / iter
iter: 500 / 1000, total loss: nan, rpn_loss_cls: 0.6531, rpn_loss_box: nan, loss_cls: 0.2513, loss_box: 0.0110, lr: 0.001000
speed: 0.249s / iter
iter: 510 / 1000, total loss: nan, rpn_loss_cls: 0.5418, rpn_loss_box: nan, loss_cls: 0.2234, loss_box: 0.1230, lr: 0.001000
speed: 0.248s / iter
iter: 520 / 1000, total loss: nan, rpn_loss_cls: 0.5506, rpn_loss_box: nan, loss_cls: 0.1037, loss_box: 0.0006, lr: 0.001000
speed: 0.247s / iter
iter: 530 / 1000, total loss: nan, rpn_loss_cls: 0.5963, rpn_loss_box: nan, loss_cls: 0.1390, loss_box: 0.0005, lr: 0.001000
speed: 0.246s / iter
iter: 540 / 1000, total loss: nan, rpn_loss_cls: 0.5730, rpn_loss_box: nan, loss_cls: 0.1134, loss_box: 0.0014, lr: 0.001000
speed: 0.246s / iter
iter: 550 / 1000, total loss: nan, rpn_loss_cls: 0.5397, rpn_loss_box: nan, loss_cls: 0.0747, loss_box: 0.0009, lr: 0.001000
speed: 0.245s / iter
iter: 560 / 1000, total loss: nan, rpn_loss_cls: 0.5283, rpn_loss_box: nan, loss_cls: 0.0698, loss_box: 0.0002, lr: 0.001000
speed: 0.244s / iter
iter: 570 / 1000, total loss: nan, rpn_loss_cls: 0.5341, rpn_loss_box: nan, loss_cls: 0.1133, loss_box: 0.0004, lr: 0.001000
speed: 0.243s / iter
iter: 580 / 1000, total loss: nan, rpn_loss_cls: 0.5840, rpn_loss_box: nan, loss_cls: 0.2729, loss_box: 0.0039, lr: 0.001000
speed: 0.243s / iter
iter: 590 / 1000, total loss: nan, rpn_loss_cls: 0.6429, rpn_loss_box: nan, loss_cls: 0.1844, loss_box: 0.0041, lr: 0.001000
speed: 0.242s / iter
iter: 600 / 1000, total loss: nan, rpn_loss_cls: 0.5449, rpn_loss_box: nan, loss_cls: 0.1095, loss_box: 0.0010, lr: 0.001000
speed: 0.241s / iter
iter: 610 / 1000, total loss: nan, rpn_loss_cls: 0.5695, rpn_loss_box: nan, loss_cls: 0.0981, loss_box: 0.0009, lr: 0.001000
speed: 0.241s / iter
iter: 620 / 1000, total loss: nan, rpn_loss_cls: 0.5673, rpn_loss_box: nan, loss_cls: 0.5977, loss_box: 0.0406, lr: 0.001000
speed: 0.240s / iter
iter: 630 / 1000, total loss: nan, rpn_loss_cls: 0.5255, rpn_loss_box: nan, loss_cls: 0.0657, loss_box: 0.0011, lr: 0.001000
speed: 0.239s / iter
iter: 640 / 1000, total loss: nan, rpn_loss_cls: 0.5281, rpn_loss_box: nan, loss_cls: 0.0754, loss_box: 0.0000, lr: 0.001000
speed: 0.239s / iter
iter: 650 / 1000, total loss: nan, rpn_loss_cls: 0.5062, rpn_loss_box: nan, loss_cls: 0.1258, loss_box: 0.0007, lr: 0.001000
speed: 0.238s / iter
iter: 660 / 1000, total loss: nan, rpn_loss_cls: 0.5694, rpn_loss_box: nan, loss_cls: 0.1660, loss_box: 0.0004, lr: 0.001000
speed: 0.238s / iter
iter: 670 / 1000, total loss: nan, rpn_loss_cls: 0.7181, rpn_loss_box: nan, loss_cls: 0.2556, loss_box: 0.0018, lr: 0.001000
speed: 0.237s / iter
iter: 680 / 1000, total loss: nan, rpn_loss_cls: 0.5516, rpn_loss_box: nan, loss_cls: 0.2402, loss_box: 0.0053, lr: 0.001000
speed: 0.237s / iter
iter: 690 / 1000, total loss: nan, rpn_loss_cls: 0.4953, rpn_loss_box: nan, loss_cls: 0.0797, loss_box: 0.0002, lr: 0.001000
speed: 0.236s / iter
iter: 700 / 1000, total loss: nan, rpn_loss_cls: 0.5831, rpn_loss_box: nan, loss_cls: 0.1030, loss_box: 0.0003, lr: 0.001000
speed: 0.236s / iter
iter: 710 / 1000, total loss: nan, rpn_loss_cls: 0.5198, rpn_loss_box: nan, loss_cls: 0.0584, loss_box: 0.0006, lr: 0.001000
speed: 0.235s / iter
iter: 720 / 1000, total loss: nan, rpn_loss_cls: 0.5115, rpn_loss_box: nan, loss_cls: 0.2515, loss_box: 0.1867, lr: 0.001000
speed: 0.235s / iter
iter: 730 / 1000, total loss: nan, rpn_loss_cls: 0.7535, rpn_loss_box: nan, loss_cls: 0.4873, loss_box: 0.0023, lr: 0.001000
speed: 0.235s / iter
iter: 740 / 1000, total loss: nan, rpn_loss_cls: 0.5952, rpn_loss_box: nan, loss_cls: 0.1539, loss_box: 0.0082, lr: 0.001000
speed: 0.234s / iter
iter: 750 / 1000, total loss: nan, rpn_loss_cls: 0.5027, rpn_loss_box: nan, loss_cls: 0.0587, loss_box: 0.0003, lr: 0.001000
speed: 0.234s / iter
iter: 760 / 1000, total loss: nan, rpn_loss_cls: 0.4798, rpn_loss_box: nan, loss_cls: 0.1365, loss_box: 0.0023, lr: 0.001000
speed: 0.233s / iter
iter: 770 / 1000, total loss: nan, rpn_loss_cls: 0.5468, rpn_loss_box: nan, loss_cls: 0.2246, loss_box: 0.0671, lr: 0.001000
speed: 0.233s / iter
iter: 780 / 1000, total loss: nan, rpn_loss_cls: 0.4939, rpn_loss_box: nan, loss_cls: 0.0575, loss_box: 0.0017, lr: 0.001000
speed: 0.232s / iter
iter: 790 / 1000, total loss: nan, rpn_loss_cls: 0.5168, rpn_loss_box: nan, loss_cls: 0.0454, loss_box: 0.0003, lr: 0.001000
speed: 0.232s / iter
iter: 800 / 1000, total loss: nan, rpn_loss_cls: 0.5408, rpn_loss_box: nan, loss_cls: 0.1927, loss_box: 0.0072, lr: 0.001000
speed: 0.232s / iter
iter: 810 / 1000, total loss: nan, rpn_loss_cls: 0.5264, rpn_loss_box: nan, loss_cls: 0.0923, loss_box: 0.0006, lr: 0.001000
speed: 0.231s / iter
iter: 820 / 1000, total loss: nan, rpn_loss_cls: 0.5097, rpn_loss_box: nan, loss_cls: 0.1852, loss_box: 0.0006, lr: 0.001000
speed: 0.231s / iter
iter: 830 / 1000, total loss: nan, rpn_loss_cls: 0.5596, rpn_loss_box: nan, loss_cls: 0.1121, loss_box: 0.0084, lr: 0.001000
speed: 0.230s / iter
iter: 840 / 1000, total loss: nan, rpn_loss_cls: 0.7724, rpn_loss_box: nan, loss_cls: 0.6237, loss_box: 0.0196, lr: 0.001000
speed: 0.230s / iter
iter: 850 / 1000, total loss: nan, rpn_loss_cls: 0.5443, rpn_loss_box: nan, loss_cls: 0.2681, loss_box: 0.0136, lr: 0.001000
speed: 0.230s / iter
iter: 860 / 1000, total loss: nan, rpn_loss_cls: 0.4743, rpn_loss_box: nan, loss_cls: 0.0522, loss_box: 0.0003, lr: 0.001000
speed: 0.229s / iter
iter: 870 / 1000, total loss: nan, rpn_loss_cls: 0.5780, rpn_loss_box: nan, loss_cls: 0.2443, loss_box: 0.0065, lr: 0.001000
speed: 0.229s / iter
iter: 880 / 1000, total loss: nan, rpn_loss_cls: 0.5242, rpn_loss_box: nan, loss_cls: 0.2487, loss_box: 0.0010, lr: 0.001000
speed: 0.228s / iter
iter: 890 / 1000, total loss: nan, rpn_loss_cls: 0.5525, rpn_loss_box: nan, loss_cls: 0.1759, loss_box: 0.0014, lr: 0.001000
speed: 0.228s / iter
iter: 900 / 1000, total loss: nan, rpn_loss_cls: 0.4711, rpn_loss_box: nan, loss_cls: 0.1552, loss_box: 0.0028, lr: 0.001000
speed: 0.228s / iter
iter: 910 / 1000, total loss: nan, rpn_loss_cls: 0.4996, rpn_loss_box: nan, loss_cls: 0.1464, loss_box: 0.0019, lr: 0.001000
speed: 0.227s / iter
iter: 920 / 1000, total loss: nan, rpn_loss_cls: 0.5017, rpn_loss_box: nan, loss_cls: 0.1965, loss_box: 0.0029, lr: 0.001000
speed: 0.227s / iter
iter: 930 / 1000, total loss: nan, rpn_loss_cls: 0.5003, rpn_loss_box: nan, loss_cls: 0.1595, loss_box: 0.0009, lr: 0.001000
speed: 0.227s / iter
iter: 940 / 1000, total loss: nan, rpn_loss_cls: 0.4698, rpn_loss_box: nan, loss_cls: 0.0642, loss_box: 0.0009, lr: 0.001000
speed: 0.226s / iter
iter: 950 / 1000, total loss: nan, rpn_loss_cls: 0.5113, rpn_loss_box: nan, loss_cls: 0.2088, loss_box: 0.0240, lr: 0.001000
speed: 0.226s / iter
iter: 960 / 1000, total loss: nan, rpn_loss_cls: 0.5179, rpn_loss_box: nan, loss_cls: 0.0961, loss_box: 0.0022, lr: 0.001000
speed: 0.226s / iter
iter: 970 / 1000, total loss: nan, rpn_loss_cls: 0.6665, rpn_loss_box: nan, loss_cls: 0.2180, loss_box: 0.0149, lr: 0.001000
speed: 0.226s / iter
iter: 980 / 1000, total loss: nan, rpn_loss_cls: 0.4629, rpn_loss_box: nan, loss_cls: 0.0714, loss_box: 0.0006, lr: 0.001000
speed: 0.225s / iter
iter: 990 / 1000, total loss: nan, rpn_loss_cls: 0.5084, rpn_loss_box: nan, loss_cls: 0.1356, loss_box: 0.0010, lr: 0.001000
speed: 0.225s / iter
iter: 1000 / 1000, total loss: nan, rpn_loss_cls: 0.4389, rpn_loss_box: nan, loss_cls: 0.0612, loss_box: 0.0005, lr: 0.001000
speed: 0.225s / iter
Wrote snapshot to: /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
done solving

real	7m3.352s
user	6m8.732s
sys	0m59.004s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f92e291c5d0>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-12-26 14:44:53.483851: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:44:53.483935: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:44:53.483955: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:44:53.971343: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 14:44:53.972131: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.16GiB
2017-12-26 14:44:53.972285: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 14:44:53.972325: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 14:44:53.972366: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Loading model weights from /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
/home/alex/Faster-RCNN_TF/tools/../lib/rpn_msr/proposal_layer_tf.py:150: RuntimeWarning: invalid value encountered in greater_equal
  keep = np.where((ws >= min_size) & (hs >= min_size))[0]
im_detect: 1/229 2.321s 0.000s
im_detect: 2/229 1.212s 0.000s
im_detect: 3/229 0.842s 0.000s
im_detect: 4/229 0.657s 0.000s
im_detect: 5/229 0.650s 0.000s
im_detect: 6/229 0.569s 0.000s
im_detect: 7/229 0.506s 0.000s
im_detect: 8/229 0.458s 0.000s
im_detect: 9/229 0.498s 0.000s
im_detect: 10/229 0.559s 0.000s
im_detect: 11/229 0.563s 0.000s
im_detect: 12/229 0.525s 0.000s
im_detect: 13/229 0.498s 0.000s
im_detect: 14/229 0.469s 0.000s
im_detect: 15/229 0.447s 0.000s
im_detect: 16/229 0.462s 0.000s
im_detect: 17/229 0.440s 0.000s
im_detect: 18/229 0.421s 0.000s
im_detect: 19/229 0.433s 0.000s
im_detect: 20/229 0.440s 0.000s
im_detect: 21/229 0.425s 0.000s
im_detect: 22/229 0.411s 0.000s
im_detect: 23/229 0.397s 0.000s
im_detect: 24/229 0.407s 0.000s
im_detect: 25/229 0.394s 0.000s
im_detect: 26/229 0.383s 0.000s
im_detect: 27/229 0.375s 0.000s
im_detect: 28/229 0.370s 0.000s
im_detect: 29/229 0.366s 0.000s
im_detect: 30/229 0.374s 0.000s
im_detect: 31/229 0.368s 0.000s
im_detect: 32/229 0.360s 0.000s
im_detect: 33/229 0.367s 0.000s
im_detect: 34/229 0.359s 0.000s
im_detect: 35/229 0.354s 0.000s
im_detect: 36/229 0.347s 0.000s
im_detect: 37/229 0.341s 0.000s
im_detect: 38/229 0.335s 0.000s
im_detect: 39/229 0.331s 0.000s
im_detect: 40/229 0.325s 0.000s
im_detect: 41/229 0.344s 0.000s
im_detect: 42/229 0.339s 0.000s
im_detect: 43/229 0.333s 0.000s
im_detect: 44/229 0.328s 0.000s
im_detect: 45/229 0.334s 0.000s
im_detect: 46/229 0.329s 0.000s
im_detect: 47/229 0.324s 0.000s
im_detect: 48/229 0.321s 0.000s
im_detect: 49/229 0.326s 0.000s
im_detect: 50/229 0.322s 0.000s
im_detect: 51/229 0.318s 0.000s
im_detect: 52/229 0.315s 0.000s
im_detect: 53/229 0.313s 0.000s
im_detect: 54/229 0.318s 0.000s
im_detect: 55/229 0.314s 0.000s
im_detect: 56/229 0.310s 0.000s
im_detect: 57/229 0.307s 0.000s
im_detect: 58/229 0.313s 0.000s
im_detect: 59/229 0.310s 0.000s
im_detect: 60/229 0.306s 0.000s
im_detect: 61/229 0.307s 0.000s
im_detect: 62/229 0.304s 0.000s
im_detect: 63/229 0.304s 0.000s
im_detect: 64/229 0.301s 0.000s
im_detect: 65/229 0.298s 0.000s
im_detect: 66/229 0.295s 0.000s
im_detect: 67/229 0.292s 0.000s
im_detect: 68/229 0.290s 0.000s
im_detect: 69/229 0.288s 0.000s
im_detect: 70/229 0.292s 0.000s
im_detect: 71/229 0.296s 0.000s
im_detect: 72/229 0.294s 0.000s
im_detect: 73/229 0.291s 0.000s
im_detect: 74/229 0.288s 0.000s
im_detect: 75/229 0.293s 0.000s
im_detect: 76/229 0.290s 0.000s
im_detect: 77/229 0.288s 0.000s
im_detect: 78/229 0.285s 0.000s
im_detect: 79/229 0.290s 0.000s
im_detect: 80/229 0.288s 0.000s
im_detect: 81/229 0.286s 0.000s
im_detect: 82/229 0.284s 0.000s
im_detect: 83/229 0.281s 0.000s
im_detect: 84/229 0.285s 0.000s
im_detect: 85/229 0.289s 0.000s
im_detect: 86/229 0.287s 0.000s
im_detect: 87/229 0.285s 0.000s
im_detect: 88/229 0.283s 0.000s
im_detect: 89/229 0.280s 0.000s
im_detect: 90/229 0.279s 0.000s
im_detect: 91/229 0.277s 0.000s
im_detect: 92/229 0.280s 0.000s
im_detect: 93/229 0.278s 0.000s
im_detect: 94/229 0.277s 0.000s
im_detect: 95/229 0.275s 0.000s
im_detect: 96/229 0.273s 0.000s
im_detect: 97/229 0.276s 0.000s
im_detect: 98/229 0.274s 0.000s
im_detect: 99/229 0.273s 0.000s
im_detect: 100/229 0.271s 0.000s
im_detect: 101/229 0.269s 0.000s
im_detect: 102/229 0.267s 0.000s
im_detect: 103/229 0.266s 0.000s
im_detect: 104/229 0.264s 0.000s
im_detect: 105/229 0.262s 0.000s
im_detect: 106/229 0.262s 0.000s
im_detect: 107/229 0.260s 0.000s
im_detect: 108/229 0.259s 0.000s
im_detect: 109/229 0.258s 0.000s
im_detect: 110/229 0.256s 0.000s
im_detect: 111/229 0.255s 0.000s
im_detect: 112/229 0.253s 0.000s
im_detect: 113/229 0.253s 0.000s
im_detect: 114/229 0.251s 0.000s
im_detect: 115/229 0.250s 0.000s
im_detect: 116/229 0.249s 0.000s
im_detect: 117/229 0.249s 0.000s
im_detect: 118/229 0.248s 0.000s
im_detect: 119/229 0.251s 0.000s
im_detect: 120/229 0.249s 0.000s
im_detect: 121/229 0.249s 0.000s
im_detect: 122/229 0.247s 0.000s
im_detect: 123/229 0.246s 0.000s
im_detect: 124/229 0.248s 0.000s
im_detect: 125/229 0.251s 0.000s
im_detect: 126/229 0.251s 0.000s
im_detect: 127/229 0.254s 0.000s
im_detect: 128/229 0.256s 0.000s
im_detect: 129/229 0.255s 0.000s
im_detect: 130/229 0.253s 0.000s
im_detect: 131/229 0.252s 0.000s
im_detect: 132/229 0.251s 0.000s
im_detect: 133/229 0.250s 0.000s
im_detect: 134/229 0.249s 0.000s
im_detect: 135/229 0.248s 0.000s
im_detect: 136/229 0.247s 0.000s
im_detect: 137/229 0.247s 0.000s
im_detect: 138/229 0.246s 0.000s
im_detect: 139/229 0.246s 0.000s
im_detect: 140/229 0.244s 0.000s
im_detect: 141/229 0.243s 0.000s
im_detect: 142/229 0.243s 0.000s
im_detect: 143/229 0.242s 0.000s
im_detect: 144/229 0.241s 0.000s
im_detect: 145/229 0.240s 0.000s
im_detect: 146/229 0.241s 0.000s
im_detect: 147/229 0.244s 0.000s
im_detect: 148/229 0.244s 0.000s
im_detect: 149/229 0.243s 0.000s
im_detect: 150/229 0.245s 0.000s
im_detect: 151/229 0.246s 0.000s
im_detect: 152/229 0.245s 0.000s
im_detect: 153/229 0.244s 0.000s
im_detect: 154/229 0.244s 0.000s
im_detect: 155/229 0.243s 0.000s
im_detect: 156/229 0.245s 0.000s
im_detect: 157/229 0.245s 0.000s
im_detect: 158/229 0.244s 0.000s
im_detect: 159/229 0.243s 0.000s
im_detect: 160/229 0.242s 0.000s
im_detect: 161/229 0.241s 0.000s
im_detect: 162/229 0.240s 0.000s
im_detect: 163/229 0.239s 0.000s
im_detect: 164/229 0.241s 0.000s
im_detect: 165/229 0.240s 0.000s
im_detect: 166/229 0.242s 0.000s
im_detect: 167/229 0.244s 0.000s
im_detect: 168/229 0.246s 0.000s
im_detect: 169/229 0.246s 0.000s
im_detect: 170/229 0.248s 0.000s
im_detect: 171/229 0.247s 0.000s
im_detect: 172/229 0.246s 0.000s
im_detect: 173/229 0.246s 0.000s
im_detect: 174/229 0.247s 0.000s
im_detect: 175/229 0.247s 0.000s
im_detect: 176/229 0.246s 0.000s
im_detect: 177/229 0.245s 0.000s
im_detect: 178/229 0.246s 0.000s
im_detect: 179/229 0.246s 0.000s
im_detect: 180/229 0.245s 0.000s
im_detect: 181/229 0.247s 0.000s
im_detect: 182/229 0.246s 0.000s
im_detect: 183/229 0.245s 0.000s
im_detect: 184/229 0.247s 0.000s
im_detect: 185/229 0.246s 0.000s
im_detect: 186/229 0.248s 0.000s
im_detect: 187/229 0.249s 0.000s
im_detect: 188/229 0.249s 0.000s
im_detect: 189/229 0.251s 0.000s
im_detect: 190/229 0.250s 0.000s
im_detect: 191/229 0.249s 0.000s
im_detect: 192/229 0.249s 0.000s
im_detect: 193/229 0.248s 0.000s
im_detect: 194/229 0.247s 0.000s
im_detect: 195/229 0.249s 0.000s
im_detect: 196/229 0.248s 0.000s
im_detect: 197/229 0.248s 0.000s
im_detect: 198/229 0.248s 0.000s
im_detect: 199/229 0.249s 0.000s
im_detect: 200/229 0.249s 0.000s
im_detect: 201/229 0.249s 0.000s
im_detect: 202/229 0.250s 0.000s
im_detect: 203/229 0.249s 0.000s
im_detect: 204/229 0.251s 0.000s
im_detect: 205/229 0.250s 0.000s
im_detect: 206/229 0.252s 0.000s
im_detect: 207/229 0.254s 0.000s
im_detect: 208/229 0.253s 0.000s
im_detect: 209/229 0.256s 0.000s
im_detect: 210/229 0.255s 0.000s
im_detect: 211/229 0.254s 0.000s
im_detect: 212/229 0.254s 0.000s
im_detect: 213/229 0.253s 0.000s
im_detect: 214/229 0.253s 0.000s
im_detect: 215/229 0.252s 0.000s
im_detect: 216/229 0.254s 0.000s
im_detect: 217/229 0.253s 0.000s
im_detect: 218/229 0.253s 0.000s
im_detect: 219/229 0.252s 0.000s
im_detect: 220/229 0.252s 0.000s
im_detect: 221/229 0.251s 0.000s
im_detect: 222/229 0.250s 0.000s
im_detect: 223/229 0.250s 0.000s
im_detect: 224/229 0.249s 0.000s
im_detect: 225/229 0.250s 0.000s
im_detect: 226/229 0.250s 0.000s
im_detect: 227/229 0.249s 0.000s
im_detect: 228/229 0.249s 0.000s
im_detect: 229/229 0.250s 0.000s
Evaluating detections
Writing text VOC results file
VOC07 metric? Yes
AP for text = -1.0000
Mean AP = -1.0000
~~~~~~~~
Results:
-1.000
-1.000
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------

real	1m22.398s
user	1m8.356s
sys	0m11.956s
