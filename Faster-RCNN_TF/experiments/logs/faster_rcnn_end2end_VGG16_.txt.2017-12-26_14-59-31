+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-59-31
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-59-31
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 100000 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=100000, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f861ac16fd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
voc_2007_trainval gt roidb loaded from /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 302 -> 302
2017-12-26 14:59:35.159747: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:59:35.159874: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:59:35.159919: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:59:35.581360: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 14:59:35.582129: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.15GiB
2017-12-26 14:59:35.582208: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 14:59:35.582253: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 14:59:35.582283: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 100000, total loss: 2.5643, rpn_loss_cls: 0.7215, rpn_loss_box: 0.9240, loss_cls: 0.4489, loss_box: 0.4699, lr: 0.001000
speed: 0.633s / iter
iter: 20 / 100000, total loss: 2.1226, rpn_loss_cls: 0.4458, rpn_loss_box: 0.1815, loss_cls: 0.8164, loss_box: 0.6788, lr: 0.001000
speed: 0.469s / iter
iter: 30 / 100000, total loss: 1.4222, rpn_loss_cls: 0.2029, rpn_loss_box: 0.1858, loss_cls: 0.6114, loss_box: 0.4220, lr: 0.001000
speed: 0.449s / iter
iter: 40 / 100000, total loss: 1.2657, rpn_loss_cls: 0.4609, rpn_loss_box: 0.0243, loss_cls: 0.4972, loss_box: 0.2834, lr: 0.001000
speed: 0.415s / iter
iter: 50 / 100000, total loss: 0.3409, rpn_loss_cls: 0.1638, rpn_loss_box: 0.0899, loss_cls: 0.0868, loss_box: 0.0004, lr: 0.001000
speed: 0.399s / iter
iter: 60 / 100000, total loss: 1.4397, rpn_loss_cls: 0.6159, rpn_loss_box: 0.5794, loss_cls: 0.1394, loss_box: 0.1050, lr: 0.001000
speed: 0.389s / iter
iter: 70 / 100000, total loss: 0.5103, rpn_loss_cls: 0.2092, rpn_loss_box: 0.0399, loss_cls: 0.1528, loss_box: 0.1084, lr: 0.001000
speed: 0.369s / iter
iter: 80 / 100000, total loss: 1.9566, rpn_loss_cls: 0.6991, rpn_loss_box: 1.0607, loss_cls: 0.1578, loss_box: 0.0390, lr: 0.001000
speed: 0.373s / iter
iter: 90 / 100000, total loss: 0.5446, rpn_loss_cls: 0.4603, rpn_loss_box: 0.0635, loss_cls: 0.0203, loss_box: 0.0006, lr: 0.001000
speed: 0.358s / iter
iter: 100 / 100000, total loss: 2.1976, rpn_loss_cls: 0.6523, rpn_loss_box: 0.4827, loss_cls: 0.4975, loss_box: 0.5652, lr: 0.001000
speed: 0.346s / iter
iter: 110 / 100000, total loss: 1.6327, rpn_loss_cls: 0.3446, rpn_loss_box: 0.2245, loss_cls: 0.5878, loss_box: 0.4758, lr: 0.001000
speed: 0.345s / iter
iter: 120 / 100000, total loss: 0.8409, rpn_loss_cls: 0.4641, rpn_loss_box: 0.0588, loss_cls: 0.1892, loss_box: 0.1287, lr: 0.001000
speed: 0.343s / iter
iter: 130 / 100000, total loss: 1.0312, rpn_loss_cls: 0.1394, rpn_loss_box: 0.0553, loss_cls: 0.2777, loss_box: 0.5588, lr: 0.001000
speed: 0.335s / iter
iter: 140 / 100000, total loss: 1.1412, rpn_loss_cls: 0.2868, rpn_loss_box: 0.1871, loss_cls: 0.2517, loss_box: 0.4156, lr: 0.001000
speed: 0.332s / iter
iter: 150 / 100000, total loss: 1.7947, rpn_loss_cls: 0.5945, rpn_loss_box: 0.9947, loss_cls: 0.1933, loss_box: 0.0121, lr: 0.001000
speed: 0.325s / iter
iter: 160 / 100000, total loss: 1.5658, rpn_loss_cls: 0.5944, rpn_loss_box: 0.0317, loss_cls: 0.4137, loss_box: 0.5260, lr: 0.001000
speed: 0.324s / iter
iter: 170 / 100000, total loss: 1.0810, rpn_loss_cls: 0.3028, rpn_loss_box: 0.0460, loss_cls: 0.4390, loss_box: 0.2932, lr: 0.001000
speed: 0.319s / iter
iter: 180 / 100000, total loss: 0.8328, rpn_loss_cls: 0.2165, rpn_loss_box: 0.0846, loss_cls: 0.3273, loss_box: 0.2043, lr: 0.001000
speed: 0.314s / iter
iter: 190 / 100000, total loss: 1.3566, rpn_loss_cls: 0.4149, rpn_loss_box: 0.4507, loss_cls: 0.2423, loss_box: 0.2488, lr: 0.001000
speed: 0.310s / iter
iter: 200 / 100000, total loss: 1.4264, rpn_loss_cls: 0.5120, rpn_loss_box: 0.3283, loss_cls: 0.2727, loss_box: 0.3134, lr: 0.001000
speed: 0.306s / iter
iter: 210 / 100000, total loss: 0.8265, rpn_loss_cls: 0.2705, rpn_loss_box: 0.1854, loss_cls: 0.1804, loss_box: 0.1903, lr: 0.001000
speed: 0.303s / iter
iter: 220 / 100000, total loss: 1.9848, rpn_loss_cls: 0.5420, rpn_loss_box: 1.3429, loss_cls: 0.0957, loss_box: 0.0041, lr: 0.001000
speed: 0.300s / iter
iter: 230 / 100000, total loss: 1.2095, rpn_loss_cls: 0.1025, rpn_loss_box: 0.6958, loss_cls: 0.1872, loss_box: 0.2239, lr: 0.001000
speed: 0.296s / iter
iter: 240 / 100000, total loss: 1.0114, rpn_loss_cls: 0.4723, rpn_loss_box: 0.1313, loss_cls: 0.2126, loss_box: 0.1951, lr: 0.001000
speed: 0.294s / iter
iter: 250 / 100000, total loss: 1.0833, rpn_loss_cls: 0.3093, rpn_loss_box: 0.0787, loss_cls: 0.2798, loss_box: 0.4155, lr: 0.001000
speed: 0.291s / iter
iter: 260 / 100000, total loss: 1.5569, rpn_loss_cls: 0.4391, rpn_loss_box: 0.2801, loss_cls: 0.3384, loss_box: 0.4994, lr: 0.001000
speed: 0.289s / iter
iter: 270 / 100000, total loss: 0.4899, rpn_loss_cls: 0.0488, rpn_loss_box: 0.0208, loss_cls: 0.1117, loss_box: 0.3087, lr: 0.001000
speed: 0.287s / iter
iter: 280 / 100000, total loss: 0.4056, rpn_loss_cls: 0.0741, rpn_loss_box: 0.0018, loss_cls: 0.1442, loss_box: 0.1856, lr: 0.001000
speed: 0.285s / iter
iter: 290 / 100000, total loss: 1.0073, rpn_loss_cls: 0.2237, rpn_loss_box: 0.3024, loss_cls: 0.1828, loss_box: 0.2984, lr: 0.001000
speed: 0.283s / iter
iter: 300 / 100000, total loss: 0.7124, rpn_loss_cls: 0.1790, rpn_loss_box: 0.1781, loss_cls: 0.1481, loss_box: 0.2072, lr: 0.001000
speed: 0.282s / iter
iter: 310 / 100000, total loss: 0.5033, rpn_loss_cls: 0.1721, rpn_loss_box: 0.0179, loss_cls: 0.1329, loss_box: 0.1805, lr: 0.001000
speed: 0.280s / iter
iter: 320 / 100000, total loss: 0.3326, rpn_loss_cls: 0.1488, rpn_loss_box: 0.1072, loss_cls: 0.0412, loss_box: 0.0354, lr: 0.001000
speed: 0.279s / iter
iter: 330 / 100000, total loss: 1.1210, rpn_loss_cls: 0.1346, rpn_loss_box: 0.2305, loss_cls: 0.1792, loss_box: 0.5767, lr: 0.001000
speed: 0.277s / iter
iter: 340 / 100000, total loss: 0.6196, rpn_loss_cls: 0.1487, rpn_loss_box: 0.0265, loss_cls: 0.1998, loss_box: 0.2445, lr: 0.001000
speed: 0.276s / iter
iter: 350 / 100000, total loss: 2.3505, rpn_loss_cls: 0.5631, rpn_loss_box: 0.9334, loss_cls: 0.3802, loss_box: 0.4738, lr: 0.001000
speed: 0.274s / iter
iter: 360 / 100000, total loss: 1.2708, rpn_loss_cls: 0.2533, rpn_loss_box: 0.0539, loss_cls: 0.3262, loss_box: 0.6374, lr: 0.001000
speed: 0.273s / iter
iter: 370 / 100000, total loss: 0.5578, rpn_loss_cls: 0.2020, rpn_loss_box: 0.1189, loss_cls: 0.0649, loss_box: 0.1720, lr: 0.001000
speed: 0.272s / iter
iter: 380 / 100000, total loss: 1.0542, rpn_loss_cls: 0.1650, rpn_loss_box: 0.1001, loss_cls: 0.2910, loss_box: 0.4981, lr: 0.001000
speed: 0.270s / iter
iter: 390 / 100000, total loss: 0.5292, rpn_loss_cls: 0.1504, rpn_loss_box: 0.1740, loss_cls: 0.0812, loss_box: 0.1235, lr: 0.001000
speed: 0.269s / iter
iter: 400 / 100000, total loss: 2.1302, rpn_loss_cls: 0.6075, rpn_loss_box: 0.7425, loss_cls: 0.4885, loss_box: 0.2917, lr: 0.001000
speed: 0.269s / iter
iter: 410 / 100000, total loss: 1.5621, rpn_loss_cls: 0.3313, rpn_loss_box: 0.3453, loss_cls: 0.4090, loss_box: 0.4765, lr: 0.001000
speed: 0.268s / iter
iter: 420 / 100000, total loss: 0.4156, rpn_loss_cls: 0.1435, rpn_loss_box: 0.0715, loss_cls: 0.1261, loss_box: 0.0746, lr: 0.001000
speed: 0.267s / iter
iter: 430 / 100000, total loss: 1.2548, rpn_loss_cls: 0.3297, rpn_loss_box: 0.2909, loss_cls: 0.2651, loss_box: 0.3692, lr: 0.001000
speed: 0.266s / iter
