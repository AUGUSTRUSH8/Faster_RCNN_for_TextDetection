+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-48-02
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_14-48-02
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 1000 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=1000, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fec6a296fd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
wrote gt roidb to /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 302 -> 302
2017-12-26 14:48:06.704415: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:48:06.704575: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:48:06.704587: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:48:07.106886: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 14:48:07.107487: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.16GiB
2017-12-26 14:48:07.107522: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 14:48:07.107539: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 14:48:07.107560: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 1000, total loss: 2.5691, rpn_loss_cls: 0.6703, rpn_loss_box: 0.9694, loss_cls: 0.5705, loss_box: 0.3590, lr: 0.001000
speed: 0.684s / iter
iter: 20 / 1000, total loss: 1.5674, rpn_loss_cls: 0.3898, rpn_loss_box: 0.2018, loss_cls: 0.3330, loss_box: 0.6427, lr: 0.001000
speed: 0.500s / iter
iter: 30 / 1000, total loss: 1.2656, rpn_loss_cls: 0.3979, rpn_loss_box: 0.3737, loss_cls: 0.2956, loss_box: 0.1984, lr: 0.001000
speed: 0.471s / iter
iter: 40 / 1000, total loss: 1.2698, rpn_loss_cls: 0.2606, rpn_loss_box: 0.0506, loss_cls: 0.7355, loss_box: 0.2230, lr: 0.001000
speed: 0.435s / iter
iter: 50 / 1000, total loss: 0.2565, rpn_loss_cls: 0.1625, rpn_loss_box: 0.0620, loss_cls: 0.0308, loss_box: 0.0012, lr: 0.001000
speed: 0.410s / iter
iter: 60 / 1000, total loss: 1.3028, rpn_loss_cls: 0.5358, rpn_loss_box: 0.6184, loss_cls: 0.0800, loss_box: 0.0687, lr: 0.001000
speed: 0.398s / iter
iter: 70 / 1000, total loss: 0.4965, rpn_loss_cls: 0.0876, rpn_loss_box: 0.0277, loss_cls: 0.1280, loss_box: 0.2532, lr: 0.001000
speed: 0.375s / iter
iter: 80 / 1000, total loss: 1.8138, rpn_loss_cls: 0.5709, rpn_loss_box: 1.1136, loss_cls: 0.1233, loss_box: 0.0060, lr: 0.001000
speed: 0.379s / iter
iter: 90 / 1000, total loss: 0.4489, rpn_loss_cls: 0.3726, rpn_loss_box: 0.0533, loss_cls: 0.0203, loss_box: 0.0028, lr: 0.001000
speed: 0.363s / iter
iter: 100 / 1000, total loss: 1.9455, rpn_loss_cls: 0.5323, rpn_loss_box: 0.4570, loss_cls: 0.5019, loss_box: 0.4544, lr: 0.001000
speed: 0.349s / iter
iter: 110 / 1000, total loss: 1.5910, rpn_loss_cls: 0.3532, rpn_loss_box: 0.1932, loss_cls: 0.3608, loss_box: 0.6837, lr: 0.001000
speed: 0.346s / iter
iter: 120 / 1000, total loss: 1.7712, rpn_loss_cls: 0.5383, rpn_loss_box: 0.1118, loss_cls: 0.8191, loss_box: 0.3020, lr: 0.001000
speed: 0.343s / iter
iter: 130 / 1000, total loss: 1.2116, rpn_loss_cls: 0.2708, rpn_loss_box: 0.0291, loss_cls: 0.3595, loss_box: 0.5522, lr: 0.001000
speed: 0.334s / iter
iter: 140 / 1000, total loss: 1.0355, rpn_loss_cls: 0.2504, rpn_loss_box: 0.3052, loss_cls: 0.1773, loss_box: 0.3026, lr: 0.001000
speed: 0.330s / iter
iter: 150 / 1000, total loss: 2.0077, rpn_loss_cls: 0.7401, rpn_loss_box: 1.0394, loss_cls: 0.2201, loss_box: 0.0082, lr: 0.001000
speed: 0.323s / iter
iter: 160 / 1000, total loss: 1.5240, rpn_loss_cls: 0.5822, rpn_loss_box: 0.0311, loss_cls: 0.3073, loss_box: 0.6034, lr: 0.001000
speed: 0.322s / iter
iter: 170 / 1000, total loss: 1.1185, rpn_loss_cls: 0.4962, rpn_loss_box: 0.0505, loss_cls: 0.3124, loss_box: 0.2595, lr: 0.001000
speed: 0.316s / iter
iter: 180 / 1000, total loss: 0.9716, rpn_loss_cls: 0.4251, rpn_loss_box: 0.0487, loss_cls: 0.1441, loss_box: 0.3536, lr: 0.001000
speed: 0.310s / iter
iter: 190 / 1000, total loss: 1.3360, rpn_loss_cls: 0.5249, rpn_loss_box: 0.4353, loss_cls: 0.1739, loss_box: 0.2019, lr: 0.001000
speed: 0.305s / iter
iter: 200 / 1000, total loss: 1.2051, rpn_loss_cls: 0.6195, rpn_loss_box: 0.3997, loss_cls: 0.1386, loss_box: 0.0473, lr: 0.001000
speed: 0.301s / iter
iter: 210 / 1000, total loss: 0.7724, rpn_loss_cls: 0.5434, rpn_loss_box: 0.1658, loss_cls: 0.0619, loss_box: 0.0013, lr: 0.001000
speed: 0.298s / iter
iter: 220 / 1000, total loss: 2.2214, rpn_loss_cls: 0.6090, rpn_loss_box: 1.3712, loss_cls: 0.2292, loss_box: 0.0120, lr: 0.001000
speed: 0.294s / iter
iter: 230 / 1000, total loss: 1.0402, rpn_loss_cls: 0.3302, rpn_loss_box: 0.5935, loss_cls: 0.0997, loss_box: 0.0168, lr: 0.001000
speed: 0.291s / iter
iter: 240 / 1000, total loss: 1.3049, rpn_loss_cls: 0.4487, rpn_loss_box: 0.1835, loss_cls: 0.2351, loss_box: 0.4376, lr: 0.001000
speed: 0.288s / iter
iter: 250 / 1000, total loss: 0.6024, rpn_loss_cls: 0.3635, rpn_loss_box: 0.0814, loss_cls: 0.1552, loss_box: 0.0023, lr: 0.001000
speed: 0.286s / iter
iter: 260 / 1000, total loss: 1.5429, rpn_loss_cls: 0.4248, rpn_loss_box: 0.2648, loss_cls: 0.3455, loss_box: 0.5077, lr: 0.001000
speed: 0.284s / iter
iter: 270 / 1000, total loss: 0.3520, rpn_loss_cls: 0.1515, rpn_loss_box: 0.0275, loss_cls: 0.1152, loss_box: 0.0578, lr: 0.001000
speed: 0.281s / iter
iter: 280 / 1000, total loss: 0.6039, rpn_loss_cls: 0.2053, rpn_loss_box: 0.0042, loss_cls: 0.2629, loss_box: 0.1315, lr: 0.001000
speed: 0.279s / iter
iter: 290 / 1000, total loss: 1.0966, rpn_loss_cls: 0.3391, rpn_loss_box: 0.3283, loss_cls: 0.2029, loss_box: 0.2263, lr: 0.001000
speed: 0.277s / iter
iter: 300 / 1000, total loss: 1.3180, rpn_loss_cls: 0.5359, rpn_loss_box: 0.3822, loss_cls: 0.1527, loss_box: 0.2472, lr: 0.001000
speed: 0.275s / iter
iter: 310 / 1000, total loss: 1.2041, rpn_loss_cls: 0.4031, rpn_loss_box: 0.6900, loss_cls: 0.1104, loss_box: 0.0005, lr: 0.001000
speed: 0.273s / iter
iter: 320 / 1000, total loss: 1.7786, rpn_loss_cls: 0.3358, rpn_loss_box: 0.4687, loss_cls: 0.3673, loss_box: 0.6068, lr: 0.001000
speed: 0.272s / iter
iter: 330 / 1000, total loss: 0.9620, rpn_loss_cls: 0.4223, rpn_loss_box: 0.0864, loss_cls: 0.2894, loss_box: 0.1639, lr: 0.001000
speed: 0.270s / iter
iter: 340 / 1000, total loss: 0.2962, rpn_loss_cls: 0.1287, rpn_loss_box: 0.0211, loss_cls: 0.0714, loss_box: 0.0750, lr: 0.001000
speed: 0.269s / iter
iter: 350 / 1000, total loss: 1.6087, rpn_loss_cls: 0.4690, rpn_loss_box: 0.2906, loss_cls: 0.3634, loss_box: 0.4857, lr: 0.001000
speed: 0.268s / iter
iter: 360 / 1000, total loss: 1.9949, rpn_loss_cls: 0.7966, rpn_loss_box: 0.8641, loss_cls: 0.1838, loss_box: 0.1504, lr: 0.001000
speed: 0.267s / iter
iter: 370 / 1000, total loss: 0.4432, rpn_loss_cls: 0.2266, rpn_loss_box: 0.1788, loss_cls: 0.0374, loss_box: 0.0002, lr: 0.001000
speed: 0.265s / iter
iter: 380 / 1000, total loss: 0.8168, rpn_loss_cls: 0.1744, rpn_loss_box: 0.1282, loss_cls: 0.2085, loss_box: 0.3057, lr: 0.001000
speed: 0.264s / iter
iter: 390 / 1000, total loss: 0.6727, rpn_loss_cls: 0.2305, rpn_loss_box: 0.0266, loss_cls: 0.2192, loss_box: 0.1964, lr: 0.001000
speed: 0.263s / iter
iter: 400 / 1000, total loss: 1.0249, rpn_loss_cls: 0.3247, rpn_loss_box: 0.1274, loss_cls: 0.3086, loss_box: 0.2642, lr: 0.001000
speed: 0.262s / iter
iter: 410 / 1000, total loss: 0.9593, rpn_loss_cls: 0.2320, rpn_loss_box: 0.1263, loss_cls: 0.3394, loss_box: 0.2616, lr: 0.001000
speed: 0.261s / iter
iter: 420 / 1000, total loss: 0.3616, rpn_loss_cls: 0.0406, rpn_loss_box: 0.0028, loss_cls: 0.2066, loss_box: 0.1117, lr: 0.001000
speed: 0.260s / iter
iter: 430 / 1000, total loss: 1.5119, rpn_loss_cls: 0.4655, rpn_loss_box: 0.3615, loss_cls: 0.3441, loss_box: 0.3408, lr: 0.001000
speed: 0.259s / iter
iter: 440 / 1000, total loss: 0.6288, rpn_loss_cls: 0.1835, rpn_loss_box: 0.0303, loss_cls: 0.2518, loss_box: 0.1633, lr: 0.001000
speed: 0.258s / iter
iter: 450 / 1000, total loss: 0.5844, rpn_loss_cls: 0.1440, rpn_loss_box: 0.0425, loss_cls: 0.2106, loss_box: 0.1873, lr: 0.001000
speed: 0.257s / iter
iter: 460 / 1000, total loss: 0.7041, rpn_loss_cls: 0.2672, rpn_loss_box: 0.0169, loss_cls: 0.2515, loss_box: 0.1684, lr: 0.001000
speed: 0.257s / iter
iter: 470 / 1000, total loss: 0.5156, rpn_loss_cls: 0.1444, rpn_loss_box: 0.1245, loss_cls: 0.1263, loss_box: 0.1203, lr: 0.001000
speed: 0.256s / iter
iter: 480 / 1000, total loss: 0.2903, rpn_loss_cls: 0.1500, rpn_loss_box: 0.0675, loss_cls: 0.0518, loss_box: 0.0210, lr: 0.001000
speed: 0.255s / iter
iter: 490 / 1000, total loss: 1.2690, rpn_loss_cls: 0.1456, rpn_loss_box: 0.3136, loss_cls: 0.2541, loss_box: 0.5557, lr: 0.001000
speed: 0.254s / iter
iter: 500 / 1000, total loss: 0.4709, rpn_loss_cls: 0.0910, rpn_loss_box: 0.0327, loss_cls: 0.1656, loss_box: 0.1817, lr: 0.001000
speed: 0.254s / iter
iter: 510 / 1000, total loss: 0.9909, rpn_loss_cls: 0.2043, rpn_loss_box: 0.1707, loss_cls: 0.2128, loss_box: 0.4031, lr: 0.001000
speed: 0.253s / iter
iter: 520 / 1000, total loss: 1.0053, rpn_loss_cls: 0.1719, rpn_loss_box: 0.0772, loss_cls: 0.1844, loss_box: 0.5719, lr: 0.001000
speed: 0.252s / iter
iter: 530 / 1000, total loss: 0.2496, rpn_loss_cls: 0.0879, rpn_loss_box: 0.0036, loss_cls: 0.0907, loss_box: 0.0674, lr: 0.001000
speed: 0.251s / iter
iter: 540 / 1000, total loss: 1.3573, rpn_loss_cls: 0.2953, rpn_loss_box: 0.2287, loss_cls: 0.2570, loss_box: 0.5763, lr: 0.001000
speed: 0.251s / iter
iter: 550 / 1000, total loss: 1.0171, rpn_loss_cls: 0.2362, rpn_loss_box: 0.1414, loss_cls: 0.2770, loss_box: 0.3624, lr: 0.001000
speed: 0.250s / iter
iter: 560 / 1000, total loss: 0.4133, rpn_loss_cls: 0.2294, rpn_loss_box: 0.0086, loss_cls: 0.0847, loss_box: 0.0906, lr: 0.001000
speed: 0.250s / iter
iter: 570 / 1000, total loss: 0.9542, rpn_loss_cls: 0.2941, rpn_loss_box: 0.1243, loss_cls: 0.1747, loss_box: 0.3612, lr: 0.001000
speed: 0.250s / iter
iter: 580 / 1000, total loss: 5.1262, rpn_loss_cls: 1.4710, rpn_loss_box: 2.7707, loss_cls: 0.6974, loss_box: 0.1870, lr: 0.001000
speed: 0.249s / iter
iter: 590 / 1000, total loss: 1.0747, rpn_loss_cls: 0.3208, rpn_loss_box: 0.3718, loss_cls: 0.1680, loss_box: 0.2140, lr: 0.001000
speed: 0.249s / iter
iter: 600 / 1000, total loss: 0.4377, rpn_loss_cls: 0.1349, rpn_loss_box: 0.0351, loss_cls: 0.0747, loss_box: 0.1930, lr: 0.001000
speed: 0.248s / iter
iter: 610 / 1000, total loss: 0.3113, rpn_loss_cls: 0.0988, rpn_loss_box: 0.0234, loss_cls: 0.0844, loss_box: 0.1047, lr: 0.001000
speed: 0.248s / iter
iter: 620 / 1000, total loss: 0.4408, rpn_loss_cls: 0.0721, rpn_loss_box: 0.0253, loss_cls: 0.1182, loss_box: 0.2252, lr: 0.001000
speed: 0.248s / iter
iter: 630 / 1000, total loss: 0.6925, rpn_loss_cls: 0.0757, rpn_loss_box: 0.1859, loss_cls: 0.1856, loss_box: 0.2453, lr: 0.001000
speed: 0.247s / iter
iter: 640 / 1000, total loss: 0.8724, rpn_loss_cls: 0.1911, rpn_loss_box: 0.1014, loss_cls: 0.2461, loss_box: 0.3338, lr: 0.001000
speed: 0.247s / iter
iter: 650 / 1000, total loss: 1.1916, rpn_loss_cls: 0.2303, rpn_loss_box: 0.2920, loss_cls: 0.2588, loss_box: 0.4106, lr: 0.001000
speed: 0.247s / iter
iter: 660 / 1000, total loss: 0.4978, rpn_loss_cls: 0.1513, rpn_loss_box: 0.0613, loss_cls: 0.1475, loss_box: 0.1377, lr: 0.001000
speed: 0.246s / iter
iter: 670 / 1000, total loss: 1.0190, rpn_loss_cls: 0.2085, rpn_loss_box: 0.1587, loss_cls: 0.2411, loss_box: 0.4108, lr: 0.001000
speed: 0.246s / iter
iter: 680 / 1000, total loss: 0.3504, rpn_loss_cls: 0.0545, rpn_loss_box: 0.0075, loss_cls: 0.1778, loss_box: 0.1106, lr: 0.001000
speed: 0.246s / iter
iter: 690 / 1000, total loss: 0.9618, rpn_loss_cls: 0.1771, rpn_loss_box: 0.1174, loss_cls: 0.2252, loss_box: 0.4420, lr: 0.001000
speed: 0.245s / iter
iter: 700 / 1000, total loss: 0.3581, rpn_loss_cls: 0.0589, rpn_loss_box: 0.0111, loss_cls: 0.1446, loss_box: 0.1435, lr: 0.001000
speed: 0.245s / iter
iter: 710 / 1000, total loss: 0.9361, rpn_loss_cls: 0.1491, rpn_loss_box: 0.1067, loss_cls: 0.2257, loss_box: 0.4547, lr: 0.001000
speed: 0.245s / iter
iter: 720 / 1000, total loss: 0.6597, rpn_loss_cls: 0.1475, rpn_loss_box: 0.0448, loss_cls: 0.0955, loss_box: 0.3719, lr: 0.001000
speed: 0.244s / iter
iter: 730 / 1000, total loss: 1.3316, rpn_loss_cls: 0.3509, rpn_loss_box: 0.3383, loss_cls: 0.2729, loss_box: 0.3694, lr: 0.001000
speed: 0.244s / iter
iter: 740 / 1000, total loss: 1.3930, rpn_loss_cls: 0.3853, rpn_loss_box: 0.4035, loss_cls: 0.2360, loss_box: 0.3681, lr: 0.001000
speed: 0.244s / iter
iter: 750 / 1000, total loss: 1.0340, rpn_loss_cls: 0.2318, rpn_loss_box: 0.3916, loss_cls: 0.1650, loss_box: 0.2457, lr: 0.001000
speed: 0.243s / iter
iter: 760 / 1000, total loss: 0.4563, rpn_loss_cls: 0.0891, rpn_loss_box: 0.0143, loss_cls: 0.1496, loss_box: 0.2033, lr: 0.001000
speed: 0.243s / iter
iter: 770 / 1000, total loss: 1.5798, rpn_loss_cls: 0.3698, rpn_loss_box: 0.8019, loss_cls: 0.2119, loss_box: 0.1962, lr: 0.001000
speed: 0.243s / iter
iter: 780 / 1000, total loss: 0.5167, rpn_loss_cls: 0.1066, rpn_loss_box: 0.0110, loss_cls: 0.1687, loss_box: 0.2305, lr: 0.001000
speed: 0.243s / iter
iter: 790 / 1000, total loss: 0.4429, rpn_loss_cls: 0.1035, rpn_loss_box: 0.0229, loss_cls: 0.1253, loss_box: 0.1911, lr: 0.001000
speed: 0.242s / iter
iter: 800 / 1000, total loss: 0.8241, rpn_loss_cls: 0.1253, rpn_loss_box: 0.0813, loss_cls: 0.1542, loss_box: 0.4633, lr: 0.001000
speed: 0.242s / iter
iter: 810 / 1000, total loss: 0.7795, rpn_loss_cls: 0.1190, rpn_loss_box: 0.0670, loss_cls: 0.2047, loss_box: 0.3888, lr: 0.001000
speed: 0.242s / iter
iter: 820 / 1000, total loss: 1.3223, rpn_loss_cls: 0.2375, rpn_loss_box: 0.1166, loss_cls: 0.3640, loss_box: 0.6042, lr: 0.001000
speed: 0.242s / iter
iter: 830 / 1000, total loss: 0.7460, rpn_loss_cls: 0.1171, rpn_loss_box: 0.0298, loss_cls: 0.1674, loss_box: 0.4316, lr: 0.001000
speed: 0.241s / iter
iter: 840 / 1000, total loss: 0.2707, rpn_loss_cls: 0.0845, rpn_loss_box: 0.0161, loss_cls: 0.0803, loss_box: 0.0898, lr: 0.001000
speed: 0.241s / iter
iter: 850 / 1000, total loss: 0.3209, rpn_loss_cls: 0.1445, rpn_loss_box: 0.0240, loss_cls: 0.0588, loss_box: 0.0936, lr: 0.001000
speed: 0.241s / iter
iter: 860 / 1000, total loss: 0.5526, rpn_loss_cls: 0.1880, rpn_loss_box: 0.1266, loss_cls: 0.0782, loss_box: 0.1598, lr: 0.001000
speed: 0.241s / iter
iter: 870 / 1000, total loss: 0.4022, rpn_loss_cls: 0.0301, rpn_loss_box: 0.0216, loss_cls: 0.1447, loss_box: 0.2057, lr: 0.001000
speed: 0.240s / iter
iter: 880 / 1000, total loss: 0.6892, rpn_loss_cls: 0.0530, rpn_loss_box: 0.1573, loss_cls: 0.2064, loss_box: 0.2725, lr: 0.001000
speed: 0.240s / iter
iter: 890 / 1000, total loss: 0.6311, rpn_loss_cls: 0.2553, rpn_loss_box: 0.1046, loss_cls: 0.1432, loss_box: 0.1280, lr: 0.001000
speed: 0.240s / iter
iter: 900 / 1000, total loss: 0.3209, rpn_loss_cls: 0.0551, rpn_loss_box: 0.1105, loss_cls: 0.0762, loss_box: 0.0791, lr: 0.001000
speed: 0.240s / iter
iter: 910 / 1000, total loss: 0.2232, rpn_loss_cls: 0.0720, rpn_loss_box: 0.0218, loss_cls: 0.0719, loss_box: 0.0575, lr: 0.001000
speed: 0.240s / iter
iter: 920 / 1000, total loss: 0.1550, rpn_loss_cls: 0.0582, rpn_loss_box: 0.0020, loss_cls: 0.0521, loss_box: 0.0426, lr: 0.001000
speed: 0.240s / iter
iter: 930 / 1000, total loss: 1.2529, rpn_loss_cls: 0.3055, rpn_loss_box: 0.2651, loss_cls: 0.1823, loss_box: 0.5001, lr: 0.001000
speed: 0.239s / iter
iter: 940 / 1000, total loss: 0.2775, rpn_loss_cls: 0.1177, rpn_loss_box: 0.0948, loss_cls: 0.0584, loss_box: 0.0066, lr: 0.001000
speed: 0.239s / iter
iter: 950 / 1000, total loss: 0.7811, rpn_loss_cls: 0.1227, rpn_loss_box: 0.0359, loss_cls: 0.2565, loss_box: 0.3660, lr: 0.001000
speed: 0.239s / iter
iter: 960 / 1000, total loss: 0.5234, rpn_loss_cls: 0.0675, rpn_loss_box: 0.0915, loss_cls: 0.1475, loss_box: 0.2169, lr: 0.001000
speed: 0.239s / iter
iter: 970 / 1000, total loss: 0.7288, rpn_loss_cls: 0.0658, rpn_loss_box: 0.2411, loss_cls: 0.1477, loss_box: 0.2741, lr: 0.001000
speed: 0.239s / iter
iter: 980 / 1000, total loss: 0.4268, rpn_loss_cls: 0.1474, rpn_loss_box: 0.0218, loss_cls: 0.0755, loss_box: 0.1821, lr: 0.001000
speed: 0.238s / iter
iter: 990 / 1000, total loss: 0.3010, rpn_loss_cls: 0.0333, rpn_loss_box: 0.0166, loss_cls: 0.1069, loss_box: 0.1442, lr: 0.001000
speed: 0.238s / iter
iter: 1000 / 1000, total loss: 0.8041, rpn_loss_cls: 0.1817, rpn_loss_box: 0.4527, loss_cls: 0.0705, loss_box: 0.0992, lr: 0.001000
speed: 0.238s / iter
Wrote snapshot to: /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
done solving

real	7m31.419s
user	6m34.644s
sys	1m1.860s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fe6fe55c5d0>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-12-26 14:55:35.815141: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:55:35.815208: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:55:35.815220: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 14:55:36.176700: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 14:55:36.177325: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.16GiB
2017-12-26 14:55:36.177363: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 14:55:36.177383: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 14:55:36.177407: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Loading model weights from /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_1000.ckpt
im_detect: 1/78 2.543s 0.000s
im_detect: 2/78 1.331s 0.000s
im_detect: 3/78 0.925s 0.001s
im_detect: 4/78 0.856s 0.000s
im_detect: 5/78 0.720s 0.001s
im_detect: 6/78 0.625s 0.001s
im_detect: 7/78 0.696s 0.001s
im_detect: 8/78 0.624s 0.001s
im_detect: 9/78 0.566s 0.001s
im_detect: 10/78 0.521s 0.000s
im_detect: 11/78 0.533s 0.000s
im_detect: 12/78 0.498s 0.000s
im_detect: 13/78 0.473s 0.000s
im_detect: 14/78 0.451s 0.000s
im_detect: 15/78 0.460s 0.000s
im_detect: 16/78 0.466s 0.000s
im_detect: 17/78 0.446s 0.000s
im_detect: 18/78 0.429s 0.000s
im_detect: 19/78 0.415s 0.000s
im_detect: 20/78 0.424s 0.000s
im_detect: 21/78 0.410s 0.000s
im_detect: 22/78 0.422s 0.000s
im_detect: 23/78 0.409s 0.000s
im_detect: 24/78 0.397s 0.000s
im_detect: 25/78 0.411s 0.000s
im_detect: 26/78 0.399s 0.000s
im_detect: 27/78 0.388s 0.000s
im_detect: 28/78 0.378s 0.000s
im_detect: 29/78 0.369s 0.000s
im_detect: 30/78 0.361s 0.000s
im_detect: 31/78 0.353s 0.000s
im_detect: 32/78 0.346s 0.000s
im_detect: 33/78 0.354s 0.000s
im_detect: 34/78 0.347s 0.000s
im_detect: 35/78 0.340s 0.000s
im_detect: 36/78 0.333s 0.000s
im_detect: 37/78 0.328s 0.000s
im_detect: 38/78 0.333s 0.000s
im_detect: 39/78 0.327s 0.000s
im_detect: 40/78 0.324s 0.000s
im_detect: 41/78 0.319s 0.000s
im_detect: 42/78 0.314s 0.000s
im_detect: 43/78 0.316s 0.000s
im_detect: 44/78 0.321s 0.000s
im_detect: 45/78 0.325s 0.000s
im_detect: 46/78 0.321s 0.000s
im_detect: 47/78 0.316s 0.000s
im_detect: 48/78 0.313s 0.000s
im_detect: 49/78 0.310s 0.000s
im_detect: 50/78 0.307s 0.000s
im_detect: 51/78 0.303s 0.000s
im_detect: 52/78 0.300s 0.000s
im_detect: 53/78 0.296s 0.000s
im_detect: 54/78 0.298s 0.000s
im_detect: 55/78 0.295s 0.000s
im_detect: 56/78 0.293s 0.000s
im_detect: 57/78 0.290s 0.000s
im_detect: 58/78 0.287s 0.000s
im_detect: 59/78 0.285s 0.000s
im_detect: 60/78 0.287s 0.000s
im_detect: 61/78 0.285s 0.000s
im_detect: 62/78 0.291s 0.000s
im_detect: 63/78 0.288s 0.000s
im_detect: 64/78 0.293s 0.000s
im_detect: 65/78 0.291s 0.000s
im_detect: 66/78 0.288s 0.000s
im_detect: 67/78 0.286s 0.000s
im_detect: 68/78 0.285s 0.000s
im_detect: 69/78 0.284s 0.000s
im_detect: 70/78 0.282s 0.000s
im_detect: 71/78 0.279s 0.000s
im_detect: 72/78 0.278s 0.000s
im_detect: 73/78 0.282s 0.000s
im_detect: 74/78 0.280s 0.000s
im_detect: 75/78 0.277s 0.000s
im_detect: 76/78 0.275s 0.000s
im_detect: 77/78 0.273s 0.000s
im_detect: 78/78 0.276s 0.000s
Evaluating detections
Writing text VOC results file
VOC07 metric? Yes
Reading annotation for 1/78
Saving cached annotations to /home/alex/Faster-RCNN_TF/data/VOCdevkit2007/annotations_cache/annots.pkl
AP for text = 0.4859
Mean AP = 0.4859
~~~~~~~~
Results:
0.486
0.486
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------

real	0m32.119s
user	0m25.256s
sys	0m7.392s
