+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_13-05-57
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-12-26_13-05-57
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 100 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=100, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f44c562afd0>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
wrote gt roidb to /home/alex/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 458 -> 458
2017-12-26 13:06:03.066036: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:06:03.066276: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:06:03.066323: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:06:03.450542: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 13:06:03.451221: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.18GiB
2017-12-26 13:06:03.451288: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 13:06:03.451333: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 13:06:03.451380: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/alex/anaconda3/envs/py27/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:95: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
iter: 10 / 100, total loss: 1.0590, rpn_loss_cls: 0.5436, rpn_loss_box: 0.0988, loss_cls: 0.1795, loss_box: 0.2370, lr: 0.001000
speed: 0.672s / iter
iter: 20 / 100, total loss: 1.2784, rpn_loss_cls: 0.5654, rpn_loss_box: 0.2083, loss_cls: 0.3345, loss_box: 0.1702, lr: 0.001000
speed: 0.560s / iter
iter: 30 / 100, total loss: 1.2975, rpn_loss_cls: 0.4159, rpn_loss_box: 0.6033, loss_cls: 0.1300, loss_box: 0.1482, lr: 0.001000
speed: 0.451s / iter
iter: 40 / 100, total loss: 1.0805, rpn_loss_cls: 0.2956, rpn_loss_box: 0.2427, loss_cls: 0.3842, loss_box: 0.1580, lr: 0.001000
speed: 0.394s / iter
iter: 50 / 100, total loss: 0.5690, rpn_loss_cls: 0.2444, rpn_loss_box: 0.1055, loss_cls: 0.1189, loss_box: 0.1002, lr: 0.001000
speed: 0.379s / iter
iter: 60 / 100, total loss: 1.3159, rpn_loss_cls: 0.4663, rpn_loss_box: 0.0098, loss_cls: 0.4013, loss_box: 0.4384, lr: 0.001000
speed: 0.373s / iter
iter: 70 / 100, total loss: 0.4474, rpn_loss_cls: 0.3187, rpn_loss_box: 0.0983, loss_cls: 0.0286, loss_box: 0.0017, lr: 0.001000
speed: 0.363s / iter
iter: 80 / 100, total loss: 1.8089, rpn_loss_cls: 0.3853, rpn_loss_box: 0.2849, loss_cls: 0.6735, loss_box: 0.4652, lr: 0.001000
speed: 0.356s / iter
iter: 90 / 100, total loss: 1.7282, rpn_loss_cls: 0.3513, rpn_loss_box: 0.2443, loss_cls: 0.5642, loss_box: 0.5684, lr: 0.001000
speed: 0.348s / iter
iter: 100 / 100, total loss: 1.3473, rpn_loss_cls: 0.3898, rpn_loss_box: 0.1816, loss_cls: 0.4835, loss_box: 0.2924, lr: 0.001000
speed: 0.341s / iter
Wrote snapshot to: /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt
done solving

real	1m30.699s
user	1m10.484s
sys	0m18.204s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/alex/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/alex/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/alex/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fd3686cc5d0>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-12-26 13:07:30.143310: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:07:30.143359: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:07:30.143375: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-12-26 13:07:30.516816: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:893] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2017-12-26 13:07:30.517448: I tensorflow/core/common_runtime/gpu/gpu_device.cc:955] Found device 0 with properties: 
name: GeForce GTX 1080
major: 6 minor: 1 memoryClockRate (GHz) 1.835
pciBusID 0000:83:00.0
Total memory: 7.92GiB
Free memory: 7.18GiB
2017-12-26 13:07:30.517488: I tensorflow/core/common_runtime/gpu/gpu_device.cc:976] DMA: 0 
2017-12-26 13:07:30.517510: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] 0:   Y 
2017-12-26 13:07:30.517533: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1045] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080, pci bus id: 0000:83:00.0)
Loading model weights from /home/alex/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_100.ckpt
im_detect: 1/229 2.692s 0.001s
im_detect: 2/229 1.408s 0.001s
im_detect: 3/229 0.975s 0.001s
im_detect: 4/229 0.760s 0.001s
im_detect: 5/229 0.735s 0.001s
im_detect: 6/229 0.640s 0.001s
im_detect: 7/229 0.568s 0.001s
im_detect: 8/229 0.512s 0.001s
im_detect: 9/229 0.543s 0.001s
im_detect: 10/229 0.603s 0.001s
im_detect: 11/229 0.605s 0.001s
im_detect: 12/229 0.564s 0.001s
im_detect: 13/229 0.533s 0.001s
im_detect: 14/229 0.504s 0.001s
im_detect: 15/229 0.482s 0.001s
im_detect: 16/229 0.487s 0.001s
im_detect: 17/229 0.467s 0.001s
im_detect: 18/229 0.447s 0.001s
im_detect: 19/229 0.457s 0.001s
im_detect: 20/229 0.463s 0.001s
im_detect: 21/229 0.448s 0.001s
im_detect: 22/229 0.433s 0.001s
im_detect: 23/229 0.420s 0.001s
im_detect: 24/229 0.426s 0.001s
im_detect: 25/229 0.414s 0.001s
im_detect: 26/229 0.403s 0.001s
im_detect: 27/229 0.395s 0.001s
im_detect: 28/229 0.387s 0.001s
im_detect: 29/229 0.381s 0.001s
im_detect: 30/229 0.388s 0.001s
im_detect: 31/229 0.382s 0.001s
im_detect: 32/229 0.374s 0.001s
im_detect: 33/229 0.382s 0.001s
im_detect: 34/229 0.374s 0.001s
im_detect: 35/229 0.369s 0.001s
im_detect: 36/229 0.362s 0.001s
im_detect: 37/229 0.355s 0.001s
im_detect: 38/229 0.349s 0.001s
im_detect: 39/229 0.346s 0.001s
im_detect: 40/229 0.341s 0.001s
im_detect: 41/229 0.360s 0.001s
im_detect: 42/229 0.354s 0.001s
im_detect: 43/229 0.348s 0.001s
im_detect: 44/229 0.343s 0.001s
im_detect: 45/229 0.349s 0.001s
im_detect: 46/229 0.344s 0.001s
im_detect: 47/229 0.339s 0.001s
im_detect: 48/229 0.335s 0.001s
im_detect: 49/229 0.341s 0.001s
im_detect: 50/229 0.336s 0.001s
im_detect: 51/229 0.332s 0.001s
im_detect: 52/229 0.328s 0.001s
im_detect: 53/229 0.326s 0.001s
im_detect: 54/229 0.332s 0.001s
im_detect: 55/229 0.328s 0.001s
im_detect: 56/229 0.325s 0.001s
im_detect: 57/229 0.322s 0.001s
im_detect: 58/229 0.328s 0.001s
im_detect: 59/229 0.325s 0.001s
im_detect: 60/229 0.322s 0.001s
im_detect: 61/229 0.322s 0.001s
im_detect: 62/229 0.319s 0.001s
im_detect: 63/229 0.318s 0.001s
im_detect: 64/229 0.316s 0.001s
im_detect: 65/229 0.313s 0.001s
im_detect: 66/229 0.310s 0.001s
im_detect: 67/229 0.307s 0.001s
im_detect: 68/229 0.305s 0.001s
im_detect: 69/229 0.303s 0.001s
im_detect: 70/229 0.307s 0.001s
im_detect: 71/229 0.311s 0.001s
im_detect: 72/229 0.308s 0.001s
im_detect: 73/229 0.306s 0.001s
im_detect: 74/229 0.303s 0.001s
im_detect: 75/229 0.307s 0.001s
im_detect: 76/229 0.305s 0.001s
im_detect: 77/229 0.302s 0.001s
im_detect: 78/229 0.300s 0.001s
im_detect: 79/229 0.304s 0.001s
im_detect: 80/229 0.302s 0.001s
im_detect: 81/229 0.300s 0.001s
im_detect: 82/229 0.298s 0.001s
im_detect: 83/229 0.295s 0.001s
im_detect: 84/229 0.299s 0.001s
im_detect: 85/229 0.303s 0.001s
im_detect: 86/229 0.301s 0.001s
im_detect: 87/229 0.299s 0.001s
im_detect: 88/229 0.297s 0.001s
im_detect: 89/229 0.295s 0.001s
im_detect: 90/229 0.293s 0.001s
im_detect: 91/229 0.291s 0.001s
im_detect: 92/229 0.295s 0.001s
im_detect: 93/229 0.293s 0.001s
im_detect: 94/229 0.292s 0.001s
im_detect: 95/229 0.290s 0.001s
im_detect: 96/229 0.288s 0.001s
im_detect: 97/229 0.291s 0.001s
im_detect: 98/229 0.290s 0.001s
im_detect: 99/229 0.288s 0.001s
im_detect: 100/229 0.286s 0.001s
im_detect: 101/229 0.285s 0.001s
im_detect: 102/229 0.283s 0.001s
im_detect: 103/229 0.282s 0.001s
im_detect: 104/229 0.280s 0.001s
im_detect: 105/229 0.279s 0.001s
im_detect: 106/229 0.278s 0.001s
im_detect: 107/229 0.276s 0.001s
im_detect: 108/229 0.275s 0.001s
im_detect: 109/229 0.273s 0.001s
im_detect: 110/229 0.272s 0.001s
im_detect: 111/229 0.271s 0.001s
im_detect: 112/229 0.270s 0.001s
im_detect: 113/229 0.269s 0.001s
im_detect: 114/229 0.268s 0.001s
im_detect: 115/229 0.267s 0.001s
im_detect: 116/229 0.265s 0.001s
im_detect: 117/229 0.265s 0.001s
im_detect: 118/229 0.263s 0.001s
im_detect: 119/229 0.266s 0.001s
im_detect: 120/229 0.265s 0.001s
im_detect: 121/229 0.264s 0.001s
im_detect: 122/229 0.263s 0.001s
im_detect: 123/229 0.262s 0.001s
im_detect: 124/229 0.263s 0.001s
im_detect: 125/229 0.266s 0.001s
im_detect: 126/229 0.266s 0.001s
im_detect: 127/229 0.268s 0.001s
im_detect: 128/229 0.271s 0.001s
im_detect: 129/229 0.270s 0.001s
im_detect: 130/229 0.269s 0.001s
im_detect: 131/229 0.268s 0.001s
im_detect: 132/229 0.266s 0.001s
im_detect: 133/229 0.265s 0.001s
im_detect: 134/229 0.265s 0.001s
im_detect: 135/229 0.264s 0.001s
im_detect: 136/229 0.263s 0.001s
im_detect: 137/229 0.262s 0.001s
im_detect: 138/229 0.262s 0.001s
im_detect: 139/229 0.261s 0.001s
im_detect: 140/229 0.260s 0.001s
im_detect: 141/229 0.259s 0.001s
im_detect: 142/229 0.258s 0.001s
im_detect: 143/229 0.257s 0.001s
im_detect: 144/229 0.257s 0.001s
im_detect: 145/229 0.255s 0.001s
im_detect: 146/229 0.256s 0.001s
im_detect: 147/229 0.259s 0.001s
im_detect: 148/229 0.258s 0.001s
im_detect: 149/229 0.257s 0.001s
im_detect: 150/229 0.260s 0.001s
im_detect: 151/229 0.261s 0.001s
im_detect: 152/229 0.260s 0.001s
im_detect: 153/229 0.259s 0.001s
im_detect: 154/229 0.258s 0.001s
im_detect: 155/229 0.257s 0.001s
im_detect: 156/229 0.259s 0.001s
im_detect: 157/229 0.258s 0.001s
im_detect: 158/229 0.257s 0.001s
im_detect: 159/229 0.256s 0.001s
im_detect: 160/229 0.256s 0.001s
im_detect: 161/229 0.255s 0.001s
im_detect: 162/229 0.254s 0.001s
im_detect: 163/229 0.253s 0.001s
im_detect: 164/229 0.254s 0.001s
im_detect: 165/229 0.254s 0.001s
im_detect: 166/229 0.256s 0.001s
im_detect: 167/229 0.258s 0.001s
im_detect: 168/229 0.259s 0.001s
im_detect: 169/229 0.258s 0.001s
im_detect: 170/229 0.260s 0.001s
im_detect: 171/229 0.260s 0.001s
im_detect: 172/229 0.259s 0.001s
im_detect: 173/229 0.259s 0.001s
im_detect: 174/229 0.261s 0.001s
im_detect: 175/229 0.260s 0.001s
im_detect: 176/229 0.259s 0.001s
im_detect: 177/229 0.258s 0.001s
im_detect: 178/229 0.259s 0.001s
im_detect: 179/229 0.259s 0.001s
im_detect: 180/229 0.258s 0.001s
im_detect: 181/229 0.260s 0.001s
im_detect: 182/229 0.259s 0.001s
im_detect: 183/229 0.258s 0.001s
im_detect: 184/229 0.260s 0.001s
im_detect: 185/229 0.259s 0.001s
im_detect: 186/229 0.262s 0.001s
im_detect: 187/229 0.263s 0.001s
im_detect: 188/229 0.263s 0.001s
im_detect: 189/229 0.265s 0.001s
im_detect: 190/229 0.264s 0.001s
im_detect: 191/229 0.264s 0.001s
im_detect: 192/229 0.263s 0.001s
im_detect: 193/229 0.262s 0.001s
im_detect: 194/229 0.261s 0.001s
im_detect: 195/229 0.263s 0.001s
im_detect: 196/229 0.263s 0.001s
im_detect: 197/229 0.263s 0.001s
im_detect: 198/229 0.262s 0.001s
im_detect: 199/229 0.263s 0.001s
im_detect: 200/229 0.263s 0.001s
im_detect: 201/229 0.263s 0.001s
im_detect: 202/229 0.264s 0.001s
im_detect: 203/229 0.264s 0.001s
im_detect: 204/229 0.265s 0.001s
im_detect: 205/229 0.264s 0.001s
im_detect: 206/229 0.265s 0.001s
im_detect: 207/229 0.267s 0.001s
im_detect: 208/229 0.266s 0.001s
im_detect: 209/229 0.269s 0.001s
im_detect: 210/229 0.268s 0.001s
im_detect: 211/229 0.267s 0.001s
im_detect: 212/229 0.267s 0.001s
im_detect: 213/229 0.266s 0.001s
im_detect: 214/229 0.265s 0.001s
im_detect: 215/229 0.265s 0.001s
im_detect: 216/229 0.267s 0.001s
im_detect: 217/229 0.266s 0.001s
im_detect: 218/229 0.265s 0.001s
im_detect: 219/229 0.264s 0.001s
im_detect: 220/229 0.264s 0.001s
im_detect: 221/229 0.263s 0.001s
im_detect: 222/229 0.263s 0.001s
im_detect: 223/229 0.262s 0.001s
im_detect: 224/229 0.261s 0.001s
im_detect: 225/229 0.263s 0.001s
im_detect: 226/229 0.262s 0.001s
im_detect: 227/229 0.261s 0.001s
im_detect: 228/229 0.261s 0.001s
im_detect: 229/229 0.263s 0.001s
Evaluating detections
Writing text VOC results file
VOC07 metric? Yes
Reading annotation for 1/229
Reading annotation for 101/229
Reading annotation for 201/229
Saving cached annotations to /home/alex/Faster-RCNN_TF/data/VOCdevkit2007/annotations_cache/annots.pkl
AP for text = 0.0267
Mean AP = 0.0267
~~~~~~~~
Results:
0.027
0.027
~~~~~~~~

--------------------------------------------------------------
Results computed with the **unofficial** Python eval code.
Results should be very close to the official MATLAB eval code.
Recompute with `./tools/reval.py --matlab ...` for your paper.
-- Thanks, The Management
--------------------------------------------------------------

real	1m25.527s
user	1m11.268s
sys	0m12.276s
